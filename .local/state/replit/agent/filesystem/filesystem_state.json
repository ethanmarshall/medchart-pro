{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MedChart Pro - Patient Management System\n\n## Overview\n\nMedChart Pro is a medical patient management system designed for healthcare professionals to manage patient records, medications, and administrations. The application provides a comprehensive interface for scanning patient barcodes, viewing patient charts, managing prescriptions, and tracking medication administration. It features a modern, responsive design built with React and TypeScript, with a focus on healthcare workflow optimization.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **UI Components**: Shadcn/ui component library with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom medical-themed color palette and variables\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Server Framework**: Express.js with TypeScript\n- **API Design**: RESTful API with structured error handling and request logging\n- **Database Layer**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Data Storage**: In-memory storage simulation with fallback to actual database operations\n- **Validation**: Zod schemas for runtime type checking and API validation\n\n### Database Design\n- **Patients Table**: Core patient information including demographics, medical record numbers, and structured chart data (JSON)\n- **Medicines Table**: Medication catalog with unique identifiers and names\n- **Prescriptions Table**: Many-to-many relationship between patients and medicines\n- **Administrations Table**: Medication administration tracking with status and timestamps\n- **Schema Management**: Drizzle Kit for migrations and database schema evolution\n\n### Key Features & Components\n- **Patient Scanner**: Barcode scanning interface for quick patient lookup\n- **Patient Chart**: Comprehensive patient view with tabbed interface for medications, chart data, and history\n- **Medication Administration**: Real-time medication scanning and administration logging\n- **Patient Registration**: Form-based patient creation with validation\n- **Chart Data Management**: Rich text support for medical documentation\n\n### Authentication & Security\n- **Session Management**: Cookie-based sessions with PostgreSQL session store\n- **Data Validation**: Input sanitization and type checking at API boundaries\n- **Error Handling**: Structured error responses with appropriate HTTP status codes\n\n### Development & Build System\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Asset Management**: Static asset serving with Vite's asset pipeline\n- **Development Server**: Hot module replacement and development middleware\n\n## External Dependencies\n\n### Database & Storage\n- **PostgreSQL**: Primary database using Neon Database serverless PostgreSQL\n- **Drizzle ORM**: Type-safe database operations and schema management\n- **Connect PG Simple**: PostgreSQL session store for Express sessions\n\n### UI & Styling\n- **Radix UI**: Accessible component primitives for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework with custom medical theme\n- **Lucide React**: Consistent icon library for UI elements\n- **Font Awesome**: Additional icons for medical and UI elements\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Static type checking and enhanced developer experience\n- **ESBuild**: Fast JavaScript/TypeScript bundling for production\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer\n\n### Runtime Dependencies\n- **TanStack Query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation and schema definition\n- **Date-fns**: Date manipulation and formatting utilities\n- **Class Variance Authority**: Type-safe CSS class composition\n- **CLSX**: Conditional CSS class utilities","size_bytes":4269},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        medical: {\n          primary: \"var(--medical-primary)\",\n          secondary: \"var(--medical-secondary)\",\n          success: \"var(--medical-success)\",\n          warning: \"var(--medical-warning)\",\n          danger: \"var(--medical-danger)\",\n          background: \"var(--medical-background)\",\n          border: \"var(--medical-border)\",\n          text: {\n            primary: \"var(--medical-text-primary)\",\n            secondary: \"var(--medical-text-secondary)\",\n            muted: \"var(--medical-text-muted)\",\n          },\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      boxShadow: {\n        medical: \"var(--shadow-medical)\",\n        \"medical-lg\": \"var(--shadow-medical-lg)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3413},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Seed database with initial data\n  const { seedDatabase } = await import(\"./seed\");\n  await seedDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2181},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertPatientSchema, insertAdministrationSchema, insertPrescriptionSchema, insertMedicineSchema, insertLabTestTypeSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Get patient by ID\n  app.get(\"/api/patients/:id\", async (req, res) => {\n    try {\n      const patient = await storage.getPatient(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      res.json(patient);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create new patient\n  app.post(\"/api/patients\", async (req, res) => {\n    try {\n      const validatedData = insertPatientSchema.parse(req.body);\n      const patient = await storage.createPatient(validatedData);\n      res.status(201).json(patient);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid patient data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get all patients\n  app.get(\"/api/patients\", async (req, res) => {\n    try {\n      const patients = await storage.getAllPatients();\n      res.json(patients);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get medicine by ID\n  app.get(\"/api/medicines/:id\", async (req, res) => {\n    try {\n      const medicine = await storage.getMedicine(req.params.id);\n      if (!medicine) {\n        return res.status(404).json({ message: \"Medicine not found\" });\n      }\n      res.json(medicine);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get all medicines\n  app.get(\"/api/medicines\", async (req, res) => {\n    try {\n      const medicines = await storage.getAllMedicines();\n      res.json(medicines);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get prescriptions for a patient\n  app.get(\"/api/patients/:patientId/prescriptions\", async (req, res) => {\n    try {\n      const prescriptions = await storage.getPrescriptionsByPatient(req.params.patientId);\n      res.json(prescriptions);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get administrations for a patient\n  app.get(\"/api/patients/:patientId/administrations\", async (req, res) => {\n    try {\n      const administrations = await storage.getAdministrationsByPatient(req.params.patientId);\n      res.json(administrations);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get lab results for a patient\n  app.get(\"/api/patients/:patientId/lab-results\", async (req, res) => {\n    try {\n      const labResults = await storage.getLabResultsByPatient(req.params.patientId);\n      // Sort by taken date descending (most recent first)\n      if (labResults && labResults.length > 0) {\n        labResults.sort((a, b) => {\n          const aDate = a.takenAt ? new Date(a.takenAt).getTime() : 0;\n          const bDate = b.takenAt ? new Date(b.takenAt).getTime() : 0;\n          return bDate - aDate;\n        });\n      }\n      res.json(labResults);\n    } catch (error) {\n      console.error('Error fetching lab results:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Order lab tests (creates artificial lab results)\n  app.post(\"/api/lab-orders\", async (req, res) => {\n    try {\n      const { patientId, tests, orderDate } = req.body;\n      \n      if (!patientId || !tests || !Array.isArray(tests) || tests.length === 0) {\n        return res.status(400).json({ message: \"Invalid order data\" });\n      }\n\n      // Verify patient exists\n      const patient = await storage.getPatient(patientId);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n\n      // Generate artificial lab results for each test\n      const resultsCreated = await storage.createLabOrders(patientId, tests, orderDate);\n      \n      res.status(201).json({ \n        message: \"Lab orders created successfully\",\n        patientId,\n        testsOrdered: tests.length,\n        resultsCreated,\n        orderDate \n      });\n    } catch (error) {\n      console.error('Error creating lab orders:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Record medication administration\n  app.post(\"/api/administrations\", async (req, res) => {\n    try {\n      const validatedData = insertAdministrationSchema.parse(req.body);\n      const administration = await storage.createAdministration(validatedData);\n      res.status(201).json(administration);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid administration data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get audit logs for a specific entity\n  app.get(\"/api/audit/:entityType/:entityId\", async (req, res) => {\n    try {\n      const { entityType, entityId } = req.params;\n      const auditLogs = await storage.getAuditLogsByEntity(entityType, entityId);\n      res.json(auditLogs);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create new medicine\n  app.post(\"/api/medicines\", async (req, res) => {\n    try {\n      const validatedData = insertMedicineSchema.parse(req.body);\n      const medicine = await storage.createMedicine(validatedData);\n      res.status(201).json(medicine);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid medicine data\", errors: error.errors });\n      }\n      console.error('Error creating medicine:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Add prescription (requires PIN validation)\n  app.post(\"/api/patients/:patientId/prescriptions\", async (req, res) => {\n    try {\n      const { medicineId, dosage, periodicity, duration, startDate, endDate, pin } = req.body;\n      \n      // Validate PIN\n      if (pin !== \"1234\") {\n        return res.status(401).json({ message: \"Invalid PIN code\" });\n      }\n      \n      const validatedData = insertPrescriptionSchema.parse({\n        patientId: req.params.patientId,\n        medicineId,\n        dosage,\n        periodicity,\n        duration,\n        startDate: startDate ? new Date(startDate) : null,\n        endDate: endDate ? new Date(endDate) : null\n      });\n      \n      const prescription = await storage.createPrescription(validatedData);\n      \n      // Create audit log\n      await storage.createAuditLog({\n        entityType: 'prescription',\n        entityId: prescription.id,\n        action: 'create',\n        changes: {\n          patient_id: req.params.patientId,\n          medicine_id: medicineId,\n          action: 'prescription_added'\n        } as any\n      });\n      \n      res.status(201).json(prescription);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid prescription data\", errors: error.errors });\n      }\n      console.error('Error adding prescription:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update prescription (requires PIN validation)\n  app.patch(\"/api/patients/:patientId/prescriptions/:prescriptionId\", async (req, res) => {\n    try {\n      const { dosage, periodicity, duration, startDate, endDate, pin } = req.body;\n      \n      // Validate PIN\n      if (pin !== \"1234\") {\n        return res.status(401).json({ message: \"Invalid PIN code\" });\n      }\n      \n      const updates = { \n        dosage, \n        periodicity, \n        duration,\n        startDate: startDate ? new Date(startDate) : null,\n        endDate: endDate ? new Date(endDate) : null\n      };\n      const updatedPrescription = await storage.updatePrescription(req.params.prescriptionId, updates);\n      \n      if (!updatedPrescription) {\n        return res.status(404).json({ message: \"Prescription not found\" });\n      }\n      \n      // Create audit log\n      await storage.createAuditLog({\n        entityType: 'prescription',\n        entityId: req.params.prescriptionId,\n        action: 'update',\n        changes: {\n          patient_id: req.params.patientId,\n          prescription_id: req.params.prescriptionId,\n          updates: updates,\n          action: 'prescription_updated'\n        } as any\n      });\n      \n      res.json(updatedPrescription);\n    } catch (error) {\n      console.error('Error updating prescription:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Remove prescription (requires PIN validation)\n  app.delete(\"/api/patients/:patientId/prescriptions/:prescriptionId\", async (req, res) => {\n    try {\n      const { pin } = req.body;\n      \n      // Validate PIN\n      if (pin !== \"1234\") {\n        return res.status(401).json({ message: \"Invalid PIN code\" });\n      }\n      \n      const deleted = await storage.deletePrescription(req.params.prescriptionId);\n      \n      if (!deleted) {\n        return res.status(404).json({ message: \"Prescription not found\" });\n      }\n      \n      // Create audit log\n      await storage.createAuditLog({\n        entityType: 'prescription',\n        entityId: req.params.prescriptionId,\n        action: 'delete',\n        changes: {\n          patient_id: req.params.patientId,\n          prescription_id: req.params.prescriptionId,\n          action: 'prescription_removed'\n        } as any\n      });\n      \n      res.json({ message: \"Prescription removed successfully\" });\n    } catch (error) {\n      console.error('Error removing prescription:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Update patient data\n  app.patch(\"/api/patients/:id\", async (req, res) => {\n    try {\n      const updates = insertPatientSchema.partial().parse(req.body);\n      \n      // Get the original patient data for audit logging\n      const originalPatient = await storage.getPatient(req.params.id);\n      if (!originalPatient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      const updatedPatient = await storage.updatePatient(req.params.id, updates);\n      \n      // Create audit log for the patient update\n      const changeDetails = {\n        updated_fields: Object.keys(updates),\n        changes: Object.keys(updates).reduce((acc, field) => {\n          acc[field] = {\n            from: (originalPatient as any)[field],\n            to: (updatedPatient as any)[field]\n          };\n          return acc;\n        }, {} as Record<string, any>)\n      } as any;\n\n      await storage.createAuditLog({\n        entityType: 'patient',\n        entityId: req.params.id,\n        action: 'update',\n        changes: changeDetails\n      });\n      \n      res.json(updatedPatient);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid patient data\", errors: error.errors });\n      }\n      console.error('Error updating patient:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Delete patient (requires PIN validation)\n  app.delete(\"/api/patients/:id\", async (req, res) => {\n    try {\n      const { pin } = req.body;\n      \n      // Validate PIN\n      if (pin !== \"149500\") {\n        return res.status(401).json({ message: \"Invalid PIN code\" });\n      }\n      \n      // Check if patient exists\n      const patient = await storage.getPatient(req.params.id);\n      if (!patient) {\n        return res.status(404).json({ message: \"Patient not found\" });\n      }\n      \n      const deleted = await storage.deletePatient(req.params.id);\n      \n      if (!deleted) {\n        return res.status(500).json({ message: \"Failed to delete patient\" });\n      }\n      \n      // Create audit log\n      await storage.createAuditLog({\n        entityType: 'patient',\n        entityId: req.params.id,\n        action: 'delete',\n        changes: {\n          patient_id: req.params.id,\n          patient_name: patient.name,\n          action: 'patient_deleted'\n        } as any\n      });\n      \n      res.json({ message: \"Patient deleted successfully\" });\n    } catch (error) {\n      console.error('Error deleting patient:', error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Get all lab test types\n  app.get(\"/api/lab-test-types\", async (req, res) => {\n    try {\n      const labTestTypes = await storage.getAllLabTestTypes();\n      res.json(labTestTypes);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Create new lab test type\n  app.post(\"/api/lab-test-types\", async (req, res) => {\n    try {\n      const validatedData = insertLabTestTypeSchema.parse(req.body);\n      const labTestType = await storage.createLabTestType(validatedData);\n      res.status(201).json(labTestType);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid lab test type data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":13589},"server/storage.ts":{"content":"import { type Patient, type InsertPatient, type Medicine, type InsertMedicine, type Prescription, type InsertPrescription, type Administration, type InsertAdministration, type AuditLog, type InsertAuditLog, type LabTestType, type InsertLabTestType, type LabResult } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { patients, medicines, prescriptions, administrations, auditLogs, labTestTypes, labResults } from \"@shared/schema\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\n// Initial data for demonstration\nconst initialPatientsData = new Map<string, Patient>([\n  ['112233445566', {\n    id: '112233445566',\n    name: 'Olivia Chen',\n    dob: '1988-05-21',\n    age: 37,\n    doseWeight: '68 kg',\n    sex: 'Female',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-22',\n    codeStatus: 'Full Code',\n    isolation: 'None',\n    bed: 'LD-102',\n    allergies: 'None',\n    status: 'Stable',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Labor & Delivery',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    },\n    createdAt: new Date('2025-08-22')\n  }],\n  ['223344556677', {\n    id: '223344556677',\n    name: 'Benjamin Carter',\n    dob: '1954-11-10',\n    age: 70,\n    doseWeight: '85 kg',\n    sex: 'Male',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-20',\n    codeStatus: 'DNR/DNI',\n    isolation: 'Contact Precautions (MRSA)',\n    bed: 'ICU-205',\n    allergies: 'Penicillin',\n    status: 'Improving',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Medical',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    },\n    createdAt: new Date('2025-08-20')\n  }],\n  ['334455667788', {\n    id: '334455667788',\n    name: 'Maria Rodriguez',\n    dob: '1995-03-15',\n    age: 29,\n    doseWeight: '62 kg',\n    sex: 'Female',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-23',\n    codeStatus: 'Full Code',\n    isolation: 'None',\n    bed: 'PP-108',\n    allergies: 'Latex, Shellfish',\n    status: 'Good',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Postpartum',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    },\n    createdAt: new Date('2025-08-23')\n  }],\n  ['445566778899', {\n    id: '445566778899',\n    name: 'Baby Rodriguez',\n    dob: '2025-08-23',\n    age: 0,\n    doseWeight: '3.2 kg',\n    sex: 'Female',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-23',\n    codeStatus: 'Full Code',\n    isolation: 'None',\n    bed: 'NBN-201',\n    allergies: 'None',\n    status: 'Healthy',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Newborn',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    },\n    createdAt: new Date('2025-08-23')\n  }],\n  ['556677889900', {\n    id: '556677889900',\n    name: 'Ashley Thompson',\n    dob: '1992-07-08',\n    age: 32,\n    doseWeight: '75 kg',\n    sex: 'Female',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-24',\n    codeStatus: 'Full Code',\n    isolation: 'None',\n    bed: 'LD-105',\n    allergies: 'Codeine',\n    status: 'Active Labor',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Labor & Delivery',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    },\n    createdAt: new Date('2025-08-24')\n  }]\n]);\n\nconst medicinesData = new Map<string, Medicine>([\n  ['31908432', { id: '31908432', name: 'Acetaminophen' }],\n  ['36940245', { id: '36940245', name: 'Colace/Docusate Sodium' }],\n  ['68439028', { id: '68439028', name: 'Dermoplast Spray' }],\n  ['06134447', { id: '06134447', name: 'Dulcolax' }],\n  ['19567398', { id: '19567398', name: 'Energix/Hepatitis (for mom)' }],\n  ['95283134', { id: '95283134', name: 'Ephedrine' }],\n  ['85967245', { id: '85967245', name: 'Fentanyl' }],\n  ['35769341', { id: '35769341', name: 'Ibuprofen/Motrin' }],\n  ['60329247', { id: '60329247', name: 'Toradol' }],\n  ['09509828', { id: '09509828', name: 'Morphine' }],\n  ['20944348', { id: '20944348', name: 'Labetalol' }],\n]);\n\nconst prescriptionsData = new Map<string, Prescription[]>([\n  ['112233445566', [\n    { id: '1', patientId: '112233445566', medicineId: '35769341', dosage: '200mg', periodicity: 'Every 6 hours', duration: '7 days', startDate: new Date('2025-08-26'), endDate: new Date('2025-09-02') },\n    { id: '2', patientId: '112233445566', medicineId: '95283134', dosage: '25mg', periodicity: 'Once daily', duration: '2 weeks', startDate: new Date('2025-08-26'), endDate: new Date('2025-09-09') },\n    { id: '3', patientId: '112233445566', medicineId: '60329247', dosage: '30mg', periodicity: 'Every 8 hours as needed', duration: '5 days', startDate: new Date('2025-08-26'), endDate: new Date('2025-08-31') },\n  ]],\n  ['223344556677', [\n    { id: '4', patientId: '223344556677', medicineId: '09509828', dosage: '1mg', periodicity: 'Every 4 hours as needed', duration: 'As needed', startDate: new Date('2025-08-20'), endDate: null },\n    { id: '5', patientId: '223344556677', medicineId: '31908432', dosage: '500mg', periodicity: 'Every 6 hours', duration: '10 days', startDate: new Date('2025-08-26'), endDate: new Date('2025-09-05') },\n    { id: '6', patientId: '223344556677', medicineId: '20944348', dosage: '5mg', periodicity: 'Twice daily', duration: 'Ongoing', startDate: new Date('2025-08-20'), endDate: null },\n  ]]\n]);\n\nexport interface IStorage {\n  // Patient methods\n  getPatient(id: string): Promise<Patient | undefined>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  getAllPatients(): Promise<Patient[]>;\n  updatePatient(id: string, updates: Partial<InsertPatient>): Promise<Patient | undefined>;\n  \n  // Medicine methods\n  getMedicine(id: string): Promise<Medicine | undefined>;\n  getAllMedicines(): Promise<Medicine[]>;\n  createMedicine(medicine: InsertMedicine): Promise<Medicine>;\n  \n  // Prescription methods\n  getPrescriptionsByPatient(patientId: string): Promise<Prescription[]>;\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  updatePrescription(prescriptionId: string, updates: Partial<Pick<Prescription, 'dosage' | 'periodicity' | 'duration' | 'startDate' | 'endDate'>>): Promise<Prescription | undefined>;\n  deletePrescription(prescriptionId: string): Promise<boolean>;\n  \n  // Administration methods\n  getAdministrationsByPatient(patientId: string): Promise<Administration[]>;\n  createAdministration(administration: InsertAdministration): Promise<Administration>;\n  \n  // Audit log methods\n  getAuditLogsByEntity(entityType: string, entityId: string): Promise<AuditLog[]>;\n  createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog>;\n  \n  // Lab test type methods\n  getAllLabTestTypes(): Promise<LabTestType[]>;\n  getLabTestType(code: string): Promise<LabTestType | undefined>;\n  createLabTestType(labTestType: InsertLabTestType): Promise<LabTestType>;\n  \n  // Lab result methods\n  getLabResultsByPatient(patientId: string): Promise<LabResult[]>;\n  createLabOrders(patientId: string, tests: string[], orderDate: string): Promise<number>;\n  \n  // Delete patient method\n  deletePatient(patientId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private patients: Map<string, Patient>;\n  private medicines: Map<string, Medicine>;\n  private prescriptions: Map<string, Prescription[]>;\n  private administrations: Map<string, Administration[]>;\n  private labTestTypes: Map<string, LabTestType>;\n  private labResults: Map<string, LabResult[]>;\n\n  constructor() {\n    this.patients = new Map(initialPatientsData);\n    this.medicines = new Map(medicinesData);\n    this.prescriptions = new Map(prescriptionsData);\n    this.administrations = new Map();\n    this.labTestTypes = new Map();\n    this.labResults = new Map();\n  }\n\n  async getPatient(id: string): Promise<Patient | undefined> {\n    return this.patients.get(id);\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const patient: Patient = {\n      ...insertPatient,\n      chartData: insertPatient.chartData ?? null,\n      createdAt: new Date(),\n    };\n    this.patients.set(patient.id, patient);\n    return patient;\n  }\n\n  async getAllPatients(): Promise<Patient[]> {\n    return Array.from(this.patients.values());\n  }\n\n  async getMedicine(id: string): Promise<Medicine | undefined> {\n    return this.medicines.get(id);\n  }\n\n  async getAllMedicines(): Promise<Medicine[]> {\n    return Array.from(this.medicines.values());\n  }\n\n  async createMedicine(insertMedicine: InsertMedicine): Promise<Medicine> {\n    const medicine: Medicine = {\n      ...insertMedicine,\n    };\n    this.medicines.set(medicine.id, medicine);\n    return medicine;\n  }\n\n  async getPrescriptionsByPatient(patientId: string): Promise<Prescription[]> {\n    return this.prescriptions.get(patientId) || [];\n  }\n\n  async createPrescription(insertPrescription: InsertPrescription): Promise<Prescription> {\n    const prescription: Prescription = {\n      ...insertPrescription,\n      id: randomUUID(),\n      duration: insertPrescription.duration ?? null,\n      startDate: insertPrescription.startDate ?? null,\n      endDate: insertPrescription.endDate ?? null,\n    };\n    \n    const existing = this.prescriptions.get(prescription.patientId) || [];\n    existing.push(prescription);\n    this.prescriptions.set(prescription.patientId, existing);\n    \n    return prescription;\n  }\n\n  async updatePrescription(prescriptionId: string, updates: Partial<Pick<Prescription, 'dosage' | 'periodicity' | 'duration' | 'startDate' | 'endDate'>>): Promise<Prescription | undefined> {\n    for (const [patientId, prescriptions] of Array.from(this.prescriptions.entries())) {\n      const index = prescriptions.findIndex((p: Prescription) => p.id === prescriptionId);\n      if (index !== -1) {\n        const updatedPrescription = { ...prescriptions[index], ...updates };\n        prescriptions[index] = updatedPrescription;\n        this.prescriptions.set(patientId, prescriptions);\n        return updatedPrescription;\n      }\n    }\n    return undefined;\n  }\n\n  async deletePrescription(prescriptionId: string): Promise<boolean> {\n    for (const [patientId, prescriptions] of Array.from(this.prescriptions.entries())) {\n      const index = prescriptions.findIndex((p: Prescription) => p.id === prescriptionId);\n      if (index !== -1) {\n        prescriptions.splice(index, 1);\n        this.prescriptions.set(patientId, prescriptions);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  async getAdministrationsByPatient(patientId: string): Promise<Administration[]> {\n    return this.administrations.get(patientId) || [];\n  }\n\n  async createAdministration(insertAdministration: InsertAdministration): Promise<Administration> {\n    const administration: Administration = {\n      ...insertAdministration,\n      id: randomUUID(),\n      administeredAt: new Date(),\n    };\n    \n    const existing = this.administrations.get(administration.patientId) || [];\n    existing.push(administration);\n    this.administrations.set(administration.patientId, existing);\n    \n    return administration;\n  }\n\n  async getLabResultsByPatient(patientId: string): Promise<LabResult[]> {\n    return this.labResults.get(patientId) || [];\n  }\n\n  async createLabOrders(patientId: string, tests: string[], orderDate: string): Promise<number> {\n    // For MemStorage, return mock count\n    return tests.length;\n  }\n\n  async deletePatient(patientId: string): Promise<boolean> {\n    const deleted = this.patients.delete(patientId);\n    if (deleted) {\n      // Also clean up related data\n      this.prescriptions.delete(patientId);\n      this.administrations.delete(patientId);\n      this.labResults.delete(patientId);\n    }\n    return deleted;\n  }\n\n  async updatePatient(id: string, updates: Partial<InsertPatient>): Promise<Patient | undefined> {\n    const patient = this.patients.get(id);\n    if (!patient) return undefined;\n    \n    const updatedPatient = { ...patient, ...updates, chartData: updates.chartData ?? patient.chartData };\n    this.patients.set(id, updatedPatient);\n    return updatedPatient;\n  }\n\n  async getAuditLogsByEntity(entityType: string, entityId: string): Promise<AuditLog[]> {\n    // For MemStorage, return empty array since we don't store audit logs\n    return [];\n  }\n\n  async createAuditLog(auditLog: InsertAuditLog): Promise<AuditLog> {\n    // For MemStorage, return a mock audit log\n    return {\n      ...auditLog,\n      id: randomUUID(),\n      timestamp: new Date(),\n      changes: auditLog.changes ?? null,\n      userId: auditLog.userId ?? null,\n    };\n  }\n\n  async getAllLabTestTypes(): Promise<LabTestType[]> {\n    return Array.from(this.labTestTypes.values());\n  }\n\n  async getLabTestType(code: string): Promise<LabTestType | undefined> {\n    return this.labTestTypes.get(code);\n  }\n\n  async createLabTestType(insertLabTestType: InsertLabTestType): Promise<LabTestType> {\n    const labTestType: LabTestType = {\n      ...insertLabTestType,\n      id: randomUUID(),\n      category: insertLabTestType.category ?? null,\n      unit: insertLabTestType.unit ?? null,\n      referenceRange: insertLabTestType.referenceRange ?? null,\n      isActive: insertLabTestType.isActive ?? 1,\n      createdAt: new Date(),\n    };\n    this.labTestTypes.set(labTestType.code, labTestType);\n    return labTestType;\n  }\n}\n\n// Database Storage Implementation\nexport class DatabaseStorage implements IStorage {\n  async getPatient(id: string): Promise<Patient | undefined> {\n    const [patient] = await db.select().from(patients).where(eq(patients.id, id));\n    return patient;\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const [patient] = await db\n      .insert(patients)\n      .values(insertPatient)\n      .returning();\n    \n    // Log patient creation\n    await this.createAuditLog({\n      entityType: 'patient',\n      entityId: patient.id,\n      action: 'create',\n      changes: insertPatient as Record<string, any>,\n    });\n    \n    return patient;\n  }\n\n  async getAllPatients(): Promise<Patient[]> {\n    return await db.select().from(patients);\n  }\n\n  async updatePatient(id: string, updates: Partial<InsertPatient>): Promise<Patient | undefined> {\n    const [patient] = await db\n      .update(patients)\n      .set(updates)\n      .where(eq(patients.id, id))\n      .returning();\n    \n    if (patient) {\n      // Log patient update\n      await this.createAuditLog({\n        entityType: 'patient',\n        entityId: id,\n        action: 'update',\n        changes: updates as Record<string, any>,\n      });\n    }\n    \n    return patient;\n  }\n\n  async getMedicine(id: string): Promise<Medicine | undefined> {\n    const [medicine] = await db.select().from(medicines).where(eq(medicines.id, id));\n    return medicine;\n  }\n\n  async getAllMedicines(): Promise<Medicine[]> {\n    return await db.select().from(medicines);\n  }\n\n  async createMedicine(insertMedicine: InsertMedicine): Promise<Medicine> {\n    const [medicine] = await db\n      .insert(medicines)\n      .values(insertMedicine)\n      .returning();\n    return medicine;\n  }\n\n  async getPrescriptionsByPatient(patientId: string): Promise<Prescription[]> {\n    return await db.select().from(prescriptions).where(eq(prescriptions.patientId, patientId));\n  }\n\n  async createPrescription(insertPrescription: InsertPrescription): Promise<Prescription> {\n    const [prescription] = await db\n      .insert(prescriptions)\n      .values(insertPrescription)\n      .returning();\n    \n    // Log prescription creation\n    await this.createAuditLog({\n      entityType: 'prescription',\n      entityId: prescription.id,\n      action: 'create',\n      changes: insertPrescription as Record<string, any>,\n    });\n    \n    return prescription;\n  }\n\n  async updatePrescription(prescriptionId: string, updates: Partial<Pick<Prescription, 'dosage' | 'periodicity' | 'duration' | 'startDate' | 'endDate'>>): Promise<Prescription | undefined> {\n    const [prescription] = await db\n      .update(prescriptions)\n      .set(updates)\n      .where(eq(prescriptions.id, prescriptionId))\n      .returning();\n    \n    // Log prescription update\n    if (prescription) {\n      await this.createAuditLog({\n        entityType: 'prescription',\n        entityId: prescription.id,\n        action: 'update',\n        changes: updates as Record<string, any>,\n      });\n    }\n    \n    return prescription;\n  }\n\n  async deletePrescription(prescriptionId: string): Promise<boolean> {\n    const result = await db\n      .delete(prescriptions)\n      .where(eq(prescriptions.id, prescriptionId))\n      .returning();\n    \n    return result.length > 0;\n  }\n\n  async getAdministrationsByPatient(patientId: string): Promise<Administration[]> {\n    return await db.select().from(administrations).where(eq(administrations.patientId, patientId));\n  }\n\n  async createAdministration(insertAdministration: InsertAdministration): Promise<Administration> {\n    const [administration] = await db\n      .insert(administrations)\n      .values(insertAdministration)\n      .returning();\n    \n    // Log administration\n    await this.createAuditLog({\n      entityType: 'administration',\n      entityId: administration.id,\n      action: 'administer',\n      changes: {\n        patientId: insertAdministration.patientId,\n        medicineId: insertAdministration.medicineId,\n        status: insertAdministration.status,\n        message: insertAdministration.message,\n        administeredAt: administration.administeredAt?.toISOString() ?? null,\n      } as Record<string, any>,\n    });\n    \n    return administration;\n  }\n\n  async getAuditLogsByEntity(entityType: string, entityId: string): Promise<AuditLog[]> {\n    return await db\n      .select()\n      .from(auditLogs)\n      .where(and(\n        eq(auditLogs.entityType, entityType),\n        eq(auditLogs.entityId, entityId)\n      ))\n      .orderBy(desc(auditLogs.timestamp));\n  }\n\n  async createAuditLog(insertAuditLog: InsertAuditLog): Promise<AuditLog> {\n    const [auditLog] = await db\n      .insert(auditLogs)\n      .values(insertAuditLog)\n      .returning();\n    \n    return auditLog;\n  }\n\n  async getLabResultsByPatient(patientId: string): Promise<LabResult[]> {\n    try {\n      console.log('Fetching lab results for patient:', patientId);\n      const results = await db.select().from(labResults).where(eq(labResults.patientId, patientId));\n      console.log('Found lab results:', results.length);\n      return results;\n    } catch (error) {\n      console.error('Error in getLabResultsByPatient:', error);\n      throw error;\n    }\n  }\n\n  async createLabOrders(patientId: string, tests: string[], orderDate: string): Promise<number> {\n    try {\n      const testDefinitions: Record<string, any> = {\n        'CBC-HGB': { name: 'Complete Blood Count - Hemoglobin', unit: 'g/dL', referenceRange: '12.0-16.0 g/dL', normalRange: [12.0, 16.0] },\n        'CBC-WBC': { name: 'Complete Blood Count - White Blood Cells', unit: 'cells/μL', referenceRange: '4500-11000 cells/μL', normalRange: [4500, 11000] },\n        'BMP-GLU': { name: 'Basic Metabolic Panel - Glucose', unit: 'mg/dL', referenceRange: '70-100 mg/dL', normalRange: [70, 100] },\n        'BMP-CREAT': { name: 'Basic Metabolic Panel - Creatinine', unit: 'mg/dL', referenceRange: '0.6-1.2 mg/dL', normalRange: [0.6, 1.2] },\n        'HbA1c': { name: 'Hemoglobin A1C', unit: '%', referenceRange: '<7.0%', normalRange: [4.0, 6.5] },\n        'LIPID-CHOL': { name: 'Lipid Panel - Total Cholesterol', unit: 'mg/dL', referenceRange: '<200 mg/dL', normalRange: [150, 220] },\n        'LIPID-LDL': { name: 'Lipid Panel - LDL Cholesterol', unit: 'mg/dL', referenceRange: '<100 mg/dL', normalRange: [70, 130] },\n        'LIPID-HDL': { name: 'Lipid Panel - HDL Cholesterol', unit: 'mg/dL', referenceRange: '>40 mg/dL (M), >50 mg/dL (F)', normalRange: [40, 80] },\n        'TSH': { name: 'Thyroid Stimulating Hormone', unit: 'mIU/L', referenceRange: '0.4-4.0 mIU/L', normalRange: [0.4, 4.0] },\n        'PSA': { name: 'Prostate Specific Antigen', unit: 'ng/mL', referenceRange: '<4.0 ng/mL', normalRange: [0.1, 4.0] }\n      };\n\n      const takenAt = new Date(orderDate + 'T08:00:00Z');\n      const resultedAt = new Date(takenAt.getTime() + 2 * 60 * 60 * 1000); // 2 hours later\n      let resultsCreated = 0;\n\n      for (const testCode of tests) {\n        const testDef = testDefinitions[testCode];\n        if (!testDef) continue;\n\n        // Generate realistic values with some variation\n        const [min, max] = testDef.normalRange;\n        let value = (Math.random() * (max - min) + min).toFixed(1);\n        \n        // Randomly make some results slightly abnormal (20% chance)\n        if (Math.random() < 0.2) {\n          if (Math.random() < 0.5) {\n            value = (min * 0.8).toFixed(1); // Low\n          } else {\n            value = (max * 1.2).toFixed(1); // High\n          }\n        }\n\n        const status = this.determineLabStatus(testCode, parseFloat(value), testDef.normalRange);\n        const notes = this.generateLabNotes(testCode, status);\n\n        await db.insert(labResults).values({\n          patientId,\n          testName: testDef.name,\n          testCode,\n          value,\n          unit: testDef.unit,\n          referenceRange: testDef.referenceRange,\n          status,\n          takenAt,\n          resultedAt,\n          notes\n        });\n\n        resultsCreated++;\n      }\n\n      return resultsCreated;\n    } catch (error) {\n      console.error('Error creating lab orders:', error);\n      throw error;\n    }\n  }\n\n  async getAllLabTestTypes(): Promise<LabTestType[]> {\n    return await db.select().from(labTestTypes).where(eq(labTestTypes.isActive, 1));\n  }\n\n  async getLabTestType(code: string): Promise<LabTestType | undefined> {\n    const [labTestType] = await db.select().from(labTestTypes).where(eq(labTestTypes.code, code));\n    return labTestType;\n  }\n\n  async createLabTestType(insertLabTestType: InsertLabTestType): Promise<LabTestType> {\n    const [labTestType] = await db\n      .insert(labTestTypes)\n      .values(insertLabTestType)\n      .returning();\n    \n    // Log lab test type creation\n    await this.createAuditLog({\n      entityType: 'lab_test_type',\n      entityId: labTestType.id,\n      action: 'create',\n      changes: insertLabTestType as Record<string, any>,\n    });\n\n    return labTestType;\n  }\n\n  private determineLabStatus(testCode: string, value: number, normalRange: number[]): string {\n    const [min, max] = normalRange;\n    \n    if (value < min * 0.7 || value > max * 1.5) {\n      return 'critical';\n    } else if (value < min || value > max) {\n      return 'abnormal';\n    } else {\n      return 'normal';\n    }\n  }\n\n  private generateLabNotes(testCode: string, status: string): string | null {\n    if (status === 'normal') {\n      return `${testCode} within normal limits`;\n    } else if (status === 'abnormal') {\n      const notes: Record<string, string> = {\n        'CBC-HGB': 'Consider iron supplementation or further evaluation',\n        'CBC-WBC': 'Monitor for infection or immune response',\n        'BMP-GLU': 'Recommend dietary counseling and follow-up',\n        'BMP-CREAT': 'Consider kidney function evaluation',\n        'HbA1c': 'Diabetes management review recommended',\n        'LIPID-CHOL': 'Dietary changes and lifestyle modification advised',\n        'LIPID-LDL': 'Consider statin therapy',\n        'LIPID-HDL': 'Exercise and omega-3 supplementation recommended',\n        'TSH': 'Endocrine evaluation recommended',\n        'PSA': 'Urology consultation recommended'\n      };\n      return notes[testCode] || 'Abnormal result - recommend follow-up';\n    } else {\n      return 'Critical result - immediate attention required';\n    }\n  }\n\n  async deletePatient(patientId: string): Promise<boolean> {\n    try {\n      // Delete related records first (foreign key constraints)\n      await db.delete(labResults).where(eq(labResults.patientId, patientId));\n      await db.delete(administrations).where(eq(administrations.patientId, patientId));\n      await db.delete(prescriptions).where(eq(prescriptions.patientId, patientId));\n      \n      // Delete the patient\n      const result = await db.delete(patients).where(eq(patients.id, patientId));\n      \n      return (result.rowCount || 0) > 0;\n    } catch (error) {\n      console.error('Error deleting patient:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":24744},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const patients = pgTable(\"patients\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  dob: text(\"dob\").notNull(),\n  age: integer(\"age\").notNull(),\n  doseWeight: text(\"dose_weight\").notNull(),\n  sex: text(\"sex\").notNull(),\n  mrn: text(\"mrn\").notNull(),\n  fin: text(\"fin\").notNull(),\n  admitted: text(\"admitted\").notNull(),\n  codeStatus: text(\"code_status\").notNull(),\n  isolation: text(\"isolation\").notNull(),\n  bed: text(\"bed\").notNull(),\n  allergies: text(\"allergies\").notNull(),\n  status: text(\"status\").notNull(),\n  provider: text(\"provider\").notNull(),\n  notes: text(\"notes\").notNull(),\n  department: text(\"department\").notNull(),\n  chartData: json(\"chart_data\").$type<{\n    background: string;\n    summary: string;\n    discharge: string;\n    handoff: string;\n  }>(),\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const medicines = pgTable(\"medicines\", {\n  id: varchar(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n});\n\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  medicineId: varchar(\"medicine_id\").notNull().references(() => medicines.id),\n  dosage: varchar(\"dosage\").notNull(), // e.g., \"10mg\", \"2 tablets\", \"5ml\"\n  periodicity: varchar(\"periodicity\").notNull(), // e.g., \"Every 4 hours\", \"Twice daily\", \"As needed\"\n  duration: varchar(\"duration\"), // e.g., \"5 days\", \"2 weeks\", \"1 month\", \"Ongoing\"\n  startDate: timestamp(\"start_date\"), // When to start administering\n  endDate: timestamp(\"end_date\"), // When to stop administering\n});\n\nexport const administrations = pgTable(\"administrations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  medicineId: varchar(\"medicine_id\").notNull().references(() => medicines.id),\n  administeredAt: timestamp(\"administered_at\").default(sql`now()`),\n  status: text(\"status\").notNull(), // 'success', 'warning', 'error'\n  message: text(\"message\").notNull(),\n});\n\nexport const auditLogs = pgTable(\"audit_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: text(\"entity_type\").notNull(), // 'patient', 'administration', 'prescription'\n  entityId: varchar(\"entity_id\").notNull(),\n  action: text(\"action\").notNull(), // 'create', 'update', 'delete', 'administer'\n  changes: json(\"changes\").$type<Record<string, any>>(),\n  timestamp: timestamp(\"timestamp\").default(sql`now()`),\n  userId: varchar(\"user_id\"), // For future user tracking\n});\n\nexport const labTestTypes = pgTable(\"lab_test_types\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: varchar(\"code\").notNull().unique(), // e.g., \"CBC-HGB\", \"BMP-GLU\"\n  name: text(\"name\").notNull(), // e.g., \"Complete Blood Count - Hemoglobin\"\n  category: varchar(\"category\"), // e.g., \"Hematology\", \"Chemistry\", \"Endocrinology\"\n  unit: varchar(\"unit\"), // e.g., \"g/dL\", \"mg/dL\", \"%\"\n  referenceRange: varchar(\"reference_range\"), // normal range for this test\n  isActive: integer(\"is_active\").default(1), // 1 = active, 0 = inactive\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const labResults = pgTable(\"lab_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => patients.id),\n  testName: varchar(\"test_name\").notNull(), // e.g., \"Complete Blood Count\", \"Basic Metabolic Panel\"\n  testCode: varchar(\"test_code\"), // e.g., \"CBC\", \"BMP\", \"HbA1c\"\n  value: varchar(\"value\").notNull(), // the test result value\n  unit: varchar(\"unit\"), // e.g., \"mg/dL\", \"mmol/L\", \"%\"\n  referenceRange: varchar(\"reference_range\"), // normal range for this test\n  status: varchar(\"status\").notNull(), // 'normal', 'abnormal', 'critical', 'pending'\n  takenAt: timestamp(\"taken_at\").notNull(), // when the lab was collected\n  resultedAt: timestamp(\"resulted_at\"), // when results were available\n  notes: text(\"notes\"), // additional notes from lab\n  createdAt: timestamp(\"created_at\").default(sql`now()`),\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  createdAt: true,\n});\n\nexport const insertMedicineSchema = createInsertSchema(medicines);\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({\n  id: true,\n});\n\nexport const insertAdministrationSchema = createInsertSchema(administrations).omit({\n  id: true,\n  administeredAt: true,\n});\n\nexport const insertAuditLogSchema = createInsertSchema(auditLogs).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertLabTestTypeSchema = createInsertSchema(labTestTypes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLabResultSchema = createInsertSchema(labResults).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Patient = typeof patients.$inferSelect;\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Medicine = typeof medicines.$inferSelect;\nexport type InsertMedicine = z.infer<typeof insertMedicineSchema>;\nexport type Prescription = typeof prescriptions.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\nexport type Administration = typeof administrations.$inferSelect;\nexport type InsertAdministration = z.infer<typeof insertAdministrationSchema>;\nexport type AuditLog = typeof auditLogs.$inferSelect;\nexport type InsertAuditLog = z.infer<typeof insertAuditLogSchema>;\nexport type LabTestType = typeof labTestTypes.$inferSelect;\nexport type InsertLabTestType = z.infer<typeof insertLabTestTypeSchema>;\nexport type LabResult = typeof labResults.$inferSelect;\nexport type InsertLabResult = z.infer<typeof insertLabResultSchema>;\n","size_bytes":5975},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":798},"client/src/index.css":{"content":"@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Medical theme colors */\n  --medical-primary: hsl(180 70% 23%);\n  --medical-secondary: hsl(191 70% 26%);\n  --medical-success: hsl(158 64% 31%);\n  --medical-warning: hsl(31 91% 45%);\n  --medical-danger: hsl(0 84% 51%);\n  --medical-background: hsl(210 40% 98%);\n  --medical-border: hsl(214 32% 91%);\n  --medical-text-primary: hsl(222 84% 5%);\n  --medical-text-secondary: hsl(215 20% 65%);\n  --medical-text-muted: hsl(215 14% 34%);\n  --shadow-medical: 0 4px 6px -1px rgba(0, 0, 0, 0.08), 0 2px 4px -1px rgba(0, 0, 0, 0.04);\n  --shadow-medical-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.04);\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .medical-primary {\n    background-color: var(--medical-primary);\n  }\n  \n  .medical-secondary {\n    background-color: var(--medical-secondary);\n  }\n  \n  .medical-success {\n    background-color: var(--medical-success);\n  }\n  \n  .medical-warning {\n    background-color: var(--medical-warning);\n  }\n  \n  .medical-danger {\n    background-color: var(--medical-danger);\n  }\n  \n  .medical-background {\n    background-color: var(--medical-background);\n  }\n  \n  .medical-border {\n    border-color: var(--medical-border);\n  }\n  \n  .medical-text-primary {\n    color: var(--medical-text-primary);\n  }\n  \n  .medical-text-secondary {\n    color: var(--medical-text-secondary);\n  }\n  \n  .medical-text-muted {\n    color: var(--medical-text-muted);\n  }\n  \n  .shadow-medical {\n    box-shadow: var(--shadow-medical);\n  }\n  \n  .shadow-medical-lg {\n    box-shadow: var(--shadow-medical-lg);\n  }\n}\n","size_bytes":6681},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/medication-admin.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { type Patient, type Medicine, type Prescription, type Administration } from \"@shared/schema\";\nimport { NextDoseCountdown } from \"./next-dose-countdown\";\n\ninterface MedicationAdminProps {\n  patient: Patient;\n}\n\ninterface LogEntry {\n  message: string;\n  type: 'success' | 'warning' | 'error';\n  timestamp: string;\n}\n\nexport function MedicationAdmin({ patient }: MedicationAdminProps) {\n  const [log, setLog] = useState<LogEntry[]>([]);\n  const medScannerRef = useRef<HTMLInputElement>(null);\n  const queryClient = useQueryClient();\n  const [showDuplicateWarning, setShowDuplicateWarning] = useState(false);\n  const [duplicateMedicine, setDuplicateMedicine] = useState<{medicine: Medicine, administration: Administration} | null>(null);\n\n  useEffect(() => {\n    medScannerRef.current?.focus();\n  }, []);\n\n  // Get prescriptions for this patient\n  const { data: prescriptions = [] } = useQuery<Prescription[]>({\n    queryKey: ['/api/patients', patient.id, 'prescriptions'],\n  });\n\n  // Get all medicines for lookup\n  const { data: medicines = [] } = useQuery<Medicine[]>({\n    queryKey: ['/api/medicines'],\n  });\n\n  // Get administrations for this patient\n  const { data: administrations = [] } = useQuery<Administration[]>({\n    queryKey: ['/api/patients', patient.id, 'administrations'],\n  });\n\n  const createAdministrationMutation = useMutation({\n    mutationFn: async (data: { patientId: string; medicineId: string; status: string; message: string }) => {\n      const response = await apiRequest('POST', '/api/administrations', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patient.id, 'administrations'] });\n    },\n  });\n\n  const addLogEntry = (message: string, type: LogEntry['type']) => {\n    const timestamp = new Date().toLocaleTimeString();\n    setLog(prevLog => [{ message, type, timestamp }, ...prevLog]);\n  };\n  \n  const handleContinueWithDuplicate = () => {\n    if (duplicateMedicine) {\n      const warningMessage = `WARNING: Duplicate administration of '${duplicateMedicine.medicine.name}' - Previously administered at ${new Date(duplicateMedicine.administration.administeredAt || '').toLocaleString()}`;\n      addLogEntry(warningMessage, 'warning');\n      createAdministrationMutation.mutate({\n        patientId: patient.id,\n        medicineId: duplicateMedicine.medicine.id,\n        status: 'warning',\n        message: warningMessage\n      });\n    }\n    setShowDuplicateWarning(false);\n    setDuplicateMedicine(null);\n  };\n  \n  const handleCancelDuplicate = () => {\n    setShowDuplicateWarning(false);\n    setDuplicateMedicine(null);\n  };\n\n  const handleMedKeyPress = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === 'Enter') {\n      const medId = e.currentTarget.value.trim();\n      if (!medId) return;\n\n      const medicine = medicines.find(m => m.id === medId);\n      const prescribedIds = prescriptions.map(p => p.medicineId);\n\n      if (!medicine) {\n        const errorMessage = `ERROR: Scanned barcode ${medId} is not a known medicine.`;\n        addLogEntry(errorMessage, 'error');\n        createAdministrationMutation.mutate({\n          patientId: patient.id,\n          medicineId: medId,\n          status: 'error',\n          message: errorMessage\n        });\n      } else if (!prescribedIds.includes(medId)) {\n        const errorMessage = `DANGER: Scanned medicine '${medicine.name}' is NOT prescribed for this patient.`;\n        addLogEntry(errorMessage, 'error');\n        createAdministrationMutation.mutate({\n          patientId: patient.id,\n          medicineId: medId,\n          status: 'error',\n          message: errorMessage\n        });\n      } else {\n        // Check if medicine has been successfully administered before\n        const existingAdmin = administrations.find(\n          adm => adm.medicineId === medId && adm.status === 'success'\n        );\n        \n        if (existingAdmin) {\n          // Show warning popup instead of immediately creating administration\n          setDuplicateMedicine({ medicine, administration: existingAdmin });\n          setShowDuplicateWarning(true);\n        } else {\n          const successMessage = `SUCCESS: Administered '${medicine.name}'.`;\n          addLogEntry(successMessage, 'success');\n          createAdministrationMutation.mutate({\n            patientId: patient.id,\n            medicineId: medId,\n            status: 'success',\n            message: successMessage\n          });\n        }\n      }\n      \n      e.currentTarget.value = '';\n    }\n  };\n\n  const prescribedMedicines = prescriptions.map(p => {\n    const medicine = medicines.find(m => m.id === p.medicineId);\n    return { ...p, medicine };\n  }).filter(p => p.medicine);\n\n  // Calculate progress based on successful administrations from database\n  const successfulAdministrations = administrations.filter(adm => adm.status === 'success');\n  const uniqueAdministeredMeds = new Set(successfulAdministrations.map(adm => adm.medicineId));\n  const administeredCount = uniqueAdministeredMeds.size;\n  const totalCount = prescribedMedicines.length;\n  const progressPercentage = totalCount > 0 ? Math.round((administeredCount / totalCount) * 100) : 0;\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Left Panel - Scanner & Log */}\n      <div className=\"space-y-6\">\n        {/* Medicine Scanner */}\n        <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n          <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n            <i className=\"fas fa-qrcode text-medical-primary mr-2\"></i>Medicine Barcode Scanner\n          </h3>\n          \n          <div className=\"space-y-4\">\n            <input \n              ref={medScannerRef}\n              type=\"text\" \n              placeholder=\"Scan or Enter Medicine ID...\" \n              onKeyPress={handleMedKeyPress}\n              className=\"w-full text-center text-lg p-4 border-2 border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent transition duration-200\"\n              data-testid=\"input-medicine-scanner\"\n            />\n            \n            <div className=\"bg-slate-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-medical-text-primary mb-2\">Scanning Instructions:</h4>\n              <ul className=\"text-sm text-medical-text-muted space-y-1\">\n                <li>• Scan medicine package barcode</li>\n                <li>• System will verify against prescribed medications</li>\n                <li>• Confirmation will be logged automatically</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Verification Log */}\n        <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n          <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n            <i className=\"fas fa-clipboard-list text-medical-primary mr-2\"></i>Verification Log\n          </h3>\n          \n          <div className=\"h-64 overflow-y-auto bg-slate-50 border border-medical-border rounded-lg p-4 space-y-3\">\n            {log.length === 0 ? (\n              <div className=\"text-center py-8 text-medical-text-muted\">\n                <i className=\"fas fa-clipboard-list text-3xl mb-2 opacity-50\"></i>\n                <p className=\"text-sm\">Scan history will appear here...</p>\n              </div>\n            ) : (\n              log.map((entry, index) => (\n                <div key={index} className=\"flex items-start space-x-3\">\n                  <div className={`w-2 h-2 rounded-full mt-2 flex-shrink-0 ${\n                    entry.type === 'success' ? 'bg-medical-success' : \n                    entry.type === 'warning' ? 'bg-medical-warning' : 'bg-medical-danger'\n                  }`}></div>\n                  <div className=\"flex-1\">\n                    <p className={`text-sm font-medium ${\n                      entry.type === 'success' ? 'text-medical-success' : \n                      entry.type === 'warning' ? 'text-medical-warning' : 'text-medical-danger font-bold'\n                    }`}>\n                      {entry.message}\n                    </p>\n                    <p className=\"text-xs text-medical-text-muted font-mono\">[{entry.timestamp}]</p>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Right Panel - Prescribed Medicines & Summary */}\n      <div className=\"space-y-6\">\n        {/* Prescribed Medicines */}\n        <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n          <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n            <i className=\"fas fa-prescription-bottle-alt text-medical-primary mr-2\"></i>Prescribed Medicines\n          </h3>\n          \n          <div className=\"space-y-3\">\n            {prescribedMedicines.length === 0 ? (\n              <p className=\"text-medical-text-muted italic text-center py-4\">\n                No medications prescribed for this patient.\n              </p>\n            ) : (\n              prescribedMedicines.map((prescription) => {\n                // Check if this medicine has been successfully administered\n                const successfulAdmin = administrations.find(\n                  adm => adm.medicineId === prescription.medicineId && adm.status === 'success'\n                );\n                const isAdministered = !!successfulAdmin;\n                \n                return (\n                  <div \n                    key={prescription.id}\n                    className={`flex items-center justify-between p-3 rounded-lg border ${\n                      isAdministered \n                        ? 'bg-green-50 border-green-200' \n                        : 'bg-amber-50 border-amber-200'\n                    }`}\n                    data-testid={`medicine-${prescription.medicineId}`}\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`w-3 h-3 rounded-full ${\n                        isAdministered ? 'bg-medical-success' : 'bg-medical-warning'\n                      }`}></div>\n                      <div>\n                        <p className=\"font-medium text-medical-text-primary\">{prescription.medicine?.name}</p>\n                        <p className=\"text-xs text-medical-text-muted font-mono\">ID: {prescription.medicineId}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium text-white ${\n                        isAdministered ? 'bg-medical-success' : 'bg-medical-warning'\n                      }`}>\n                        <i className={`fas ${isAdministered ? 'fa-check' : 'fa-clock'} mr-1`}></i>\n                        {isAdministered ? 'Administered' : 'Pending'}\n                      </span>\n                      {isAdministered && successfulAdmin && successfulAdmin.administeredAt && (\n                        <div className=\"mt-1 space-y-1\">\n                          <p className=\"text-xs text-medical-text-muted\">\n                            {new Date(successfulAdmin.administeredAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                          </p>\n                          <NextDoseCountdown \n                            lastAdministeredAt={successfulAdmin.administeredAt}\n                            periodicity={prescription.periodicity}\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })\n            )}\n          </div>\n        </div>\n\n        {/* Administration Summary */}\n        <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n          <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n            <i className=\"fas fa-chart-pie text-medical-primary mr-2\"></i>Administration Summary\n          </h3>\n          \n          <div className=\"grid grid-cols-3 gap-4 mb-4\">\n            <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n              <p className=\"text-2xl font-bold text-medical-success\" data-testid=\"count-administered\">{administeredCount}</p>\n              <p className=\"text-xs text-medical-text-muted font-medium\">Administered</p>\n            </div>\n            <div className=\"text-center p-3 bg-amber-50 rounded-lg\">\n              <p className=\"text-2xl font-bold text-medical-warning\" data-testid=\"count-pending\">{totalCount - administeredCount}</p>\n              <p className=\"text-xs text-medical-text-muted font-medium\">Pending</p>\n            </div>\n            <div className=\"text-center p-3 bg-slate-50 rounded-lg\">\n              <p className=\"text-2xl font-bold text-medical-text-primary\" data-testid=\"count-total\">{totalCount}</p>\n              <p className=\"text-xs text-medical-text-muted font-medium\">Total</p>\n            </div>\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n            <div \n              className=\"bg-medical-success h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${progressPercentage}%` }}\n            ></div>\n          </div>\n          <p className=\"text-center text-sm text-medical-text-muted\">\n            <span data-testid=\"progress-percentage\">{progressPercentage}% Complete</span> • \n            Last updated: <span>{new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n          </p>\n        </div>\n      </div>\n\n      {/* Duplicate Medicine Warning Modal */}\n      {showDuplicateWarning && duplicateMedicine && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border p-6 max-w-md mx-4\">\n            <div className=\"text-center mb-4\">\n              <div className=\"w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-exclamation-triangle text-yellow-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-medical-text-primary\">Duplicate Administration Warning</h3>\n            </div>\n            \n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4\">\n              <p className=\"text-sm text-gray-800 mb-2\">\n                <strong>{duplicateMedicine.medicine.name}</strong> has already been administered to this patient.\n              </p>\n              <p className=\"text-xs text-gray-600\">\n                Previous administration: {new Date(duplicateMedicine.administration.administeredAt || '').toLocaleString()}\n              </p>\n            </div>\n            \n            <p className=\"text-sm text-gray-600 mb-6 text-center\">\n              Do you want to continue with this duplicate administration?\n            </p>\n            \n            <div className=\"flex space-x-3\">\n              <button\n                onClick={handleCancelDuplicate}\n                className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg font-medium transition-colors\"\n                data-testid=\"button-cancel-duplicate\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleContinueWithDuplicate}\n                className=\"flex-1 px-4 py-2 bg-yellow-500 hover:bg-yellow-600 text-white rounded-lg font-medium transition-colors\"\n                data-testid=\"button-continue-duplicate\"\n              >\n                Continue Anyway\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":16115},"client/src/components/patient-chart.tsx":{"content":"import { useState } from \"react\";\nimport { type Patient, type Administration, type Medicine, type Prescription, type LabResult } from \"@shared/schema\";\nimport { NextDoseCountdown } from \"./next-dose-countdown\";\nimport { MedicationAdmin } from \"./medication-admin\";\nimport { AuditLogComponent } from \"./audit-log\";\nimport { PrescriptionManager } from \"./prescription-manager\";\nimport { LabResults } from \"./lab-results\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface PatientChartProps {\n  patient: Patient;\n  onClear: () => void;\n}\n\nexport function PatientChart({ patient, onClear }: PatientChartProps) {\n  const [activeTab, setActiveTab] = useState<'medication' | 'chart' | 'history' | 'audit' | 'prescriptions' | 'labresults'>('medication');\n  const [isEditing, setIsEditing] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [deletePin, setDeletePin] = useState(\"\");\n  const [editData, setEditData] = useState({\n    notes: patient.notes,\n    status: patient.status,\n    provider: patient.provider,\n    allergies: patient.allergies,\n    codeStatus: patient.codeStatus,\n    isolation: patient.isolation,\n    bed: patient.bed,\n    age: patient.age,\n    doseWeight: patient.doseWeight\n  });\n\n  // Get administrations and medicines for history tab\n  const { data: administrations = [] } = useQuery<Administration[]>({\n    queryKey: ['/api/patients', patient.id, 'administrations'],\n  });\n  \n  const { data: medicines = [] } = useQuery<Medicine[]>({\n    queryKey: ['/api/medicines'],\n  });\n\n  // Get prescriptions for countdown calculation\n  const { data: prescriptions = [] } = useQuery<Prescription[]>({\n    queryKey: ['/api/patients', patient.id, 'prescriptions'],\n  });\n\n  // Get lab results for lab data tab\n  const { data: labResults = [] } = useQuery<LabResult[]>({\n    queryKey: ['/api/patients', patient.id, 'lab-results'],\n  });\n  \n  const queryClient = useQueryClient();\n  \n  const updatePatientMutation = useMutation({\n    mutationFn: async (updates: any) => {\n      const response = await apiRequest('PATCH', `/api/patients/${patient.id}`, updates);\n      return response.json();\n    },\n    onSuccess: (updatedPatient) => {\n      // Update all relevant caches\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      queryClient.setQueryData(['/api/patients', patient.id], updatedPatient);\n      queryClient.invalidateQueries({ queryKey: ['/api/audit'] });\n      setIsEditing(false);\n      \n      // Force a refresh by reloading the page to ensure all data is updated\n      window.location.reload();\n    },\n  });\n\n  const deletePatientMutation = useMutation({\n    mutationFn: async (pin: string) => {\n      const response = await apiRequest('DELETE', `/api/patients/${patient.id}`, { pin });\n      return response.json();\n    },\n    onSuccess: () => {\n      // Update all relevant caches\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/audit'] });\n      setShowDeleteModal(false);\n      setDeletePin(\"\");\n      \n      // Navigate back to home since patient is deleted\n      onClear();\n    },\n    onError: (error: any) => {\n      console.error('Failed to delete patient:', error);\n    }\n  });\n  \n  const handleSaveEdit = () => {\n    updatePatientMutation.mutate(editData);\n  };\n  \n  const handleCancelEdit = () => {\n    setEditData({\n      notes: patient.notes,\n      status: patient.status,\n      provider: patient.provider,\n      allergies: patient.allergies,\n      codeStatus: patient.codeStatus,\n      isolation: patient.isolation,\n      bed: patient.bed,\n      age: patient.age,\n      doseWeight: patient.doseWeight\n    });\n    setIsEditing(false);\n  };\n\n  const handleDeletePatient = () => {\n    if (deletePin === \"149500\") {\n      deletePatientMutation.mutate(deletePin);\n    }\n  };\n\n  const handleCloseDeleteModal = () => {\n    setShowDeleteModal(false);\n    setDeletePin(\"\");\n  };\n  \n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'critical': return 'bg-red-100 text-red-800 border-red-200';\n      case 'stable': return 'bg-green-100 text-green-800 border-green-200';\n      case 'good': return 'bg-green-100 text-green-800 border-green-200';\n      case 'improving': return 'bg-blue-100 text-blue-800 border-blue-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getInitials = (name: string) => {\n    return name.split(' ').map(n => n[0]).join('').toUpperCase();\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-medical-background to-slate-100\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 space-y-6\">\n        \n        {/* Patient Header Card */}\n        <div className=\"bg-white rounded-xl shadow-medical border border-medical-border\">\n          <div className=\"p-6 border-b border-medical-border\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-medical-primary to-teal-600 rounded-full flex items-center justify-center text-white text-xl font-bold\">\n                  {getInitials(patient.name)}\n                </div>\n                <div>\n                  <h2 className=\"text-2xl font-bold text-medical-text-primary\" data-testid=\"text-patient-name\">{patient.name}</h2>\n                  <div className=\"flex items-center space-x-4 mt-1\">\n                    <span className=\"text-medical-text-muted\">{patient.age} years old</span>\n                    <span className=\"text-medical-text-muted\">•</span>\n                    <span className=\"text-medical-text-muted\">{patient.sex}</span>\n                    <span className=\"text-medical-text-muted\">•</span>\n                    <span className=\"text-medical-text-muted\">{patient.doseWeight}</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <button \n                  onClick={() => setIsEditing(!isEditing)}\n                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                    isEditing \n                      ? 'bg-gray-200 text-gray-700 hover:bg-gray-300' \n                      : 'bg-medical-primary text-white hover:bg-medical-primary/90'\n                  }`}\n                  data-testid=\"button-edit-patient\"\n                >\n                  <i className={`fas ${isEditing ? 'fa-times' : 'fa-edit'} mr-2`}></i>\n                  {isEditing ? 'Cancel' : 'Edit'}\n                </button>\n                <button \n                  onClick={onClear}\n                  className=\"text-medical-text-muted hover:text-medical-text-primary p-2\"\n                  data-testid=\"button-close-patient\"\n                >\n                  <i className=\"fas fa-times text-xl\"></i>\n                </button>\n              </div>\n            </div>\n            \n            {/* Patient Info Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mt-6\">\n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide\">Patient ID</p>\n                <p className=\"font-mono font-semibold text-medical-text-primary\" data-testid=\"text-patient-id\">{patient.id}</p>\n              </div>\n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide\">MRN</p>\n                <p className=\"font-mono font-semibold text-medical-text-primary\" data-testid=\"text-patient-mrn\">{patient.mrn}</p>\n              </div>\n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide\">Admitted</p>\n                <p className=\"font-semibold text-medical-text-primary\" data-testid=\"text-patient-admitted\">{formatDate(patient.admitted)}</p>\n              </div>\n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide\">Code Status</p>\n                {isEditing ? (\n                  <select \n                    value={editData.codeStatus}\n                    onChange={(e) => setEditData({...editData, codeStatus: e.target.value})}\n                    className=\"w-full mt-1 p-1 border rounded text-sm\"\n                    data-testid=\"select-code-status\"\n                  >\n                    <option value=\"Full Code\">Full Code</option>\n                    <option value=\"DNR\">DNR</option>\n                    <option value=\"DNR/DNI\">DNR/DNI</option>\n                    <option value=\"Comfort Care\">Comfort Care</option>\n                  </select>\n                ) : (\n                  <p className=\"font-semibold text-medical-text-primary\" data-testid=\"text-patient-code-status\">{patient.codeStatus}</p>\n                )}\n              </div>\n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide\">Status</p>\n                {isEditing ? (\n                  <select \n                    value={editData.status}\n                    onChange={(e) => setEditData({...editData, status: e.target.value})}\n                    className=\"w-full mt-1 p-1 border rounded text-sm\"\n                    data-testid=\"select-status\"\n                  >\n                    <option value=\"Stable\">Stable</option>\n                    <option value=\"Critical\">Critical</option>\n                    <option value=\"Good\">Good</option>\n                    <option value=\"Improving\">Improving</option>\n                    <option value=\"Fair\">Fair</option>\n                    <option value=\"Healthy\">Healthy</option>\n                  </select>\n                ) : (\n                  <span className={`inline-block px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(patient.status)}`} data-testid=\"text-patient-status\">\n                    {patient.status}\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            {/* Extended Patient Info - Editable */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-4\">\n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide mb-2\">Provider</p>\n                {isEditing ? (\n                  <input \n                    type=\"text\" \n                    value={editData.provider}\n                    onChange={(e) => setEditData({...editData, provider: e.target.value})}\n                    className=\"w-full p-2 border rounded text-sm\"\n                    placeholder=\"Enter provider name\"\n                    data-testid=\"input-provider\"\n                  />\n                ) : (\n                  <p className=\"text-sm text-medical-text-primary\" data-testid=\"text-patient-provider\">{patient.provider}</p>\n                )}\n              </div>\n              \n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide mb-2\">Bed</p>\n                {isEditing ? (\n                  <input \n                    type=\"text\" \n                    value={editData.bed}\n                    onChange={(e) => setEditData({...editData, bed: e.target.value})}\n                    className=\"w-full p-2 border rounded text-sm\"\n                    placeholder=\"Enter bed number\"\n                    data-testid=\"input-bed\"\n                  />\n                ) : (\n                  <p className=\"text-sm text-medical-text-primary font-mono\" data-testid=\"text-patient-bed\">{patient.bed}</p>\n                )}\n              </div>\n              \n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide mb-2\">Age</p>\n                {isEditing ? (\n                  <input \n                    type=\"number\" \n                    value={editData.age}\n                    onChange={(e) => setEditData({...editData, age: parseInt(e.target.value) || 0})}\n                    className=\"w-full p-2 border rounded text-sm\"\n                    placeholder=\"Enter age\"\n                    min=\"0\"\n                    max=\"150\"\n                    data-testid=\"input-age\"\n                  />\n                ) : (\n                  <p className=\"text-sm text-medical-text-primary\" data-testid=\"text-patient-age\">{patient.age} years</p>\n                )}\n              </div>\n              \n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide mb-2\">Weight</p>\n                {isEditing ? (\n                  <input \n                    type=\"text\" \n                    value={editData.doseWeight}\n                    onChange={(e) => setEditData({...editData, doseWeight: e.target.value})}\n                    className=\"w-full p-2 border rounded text-sm\"\n                    placeholder=\"Enter weight (e.g., 75 kg)\"\n                    data-testid=\"input-weight\"\n                  />\n                ) : (\n                  <p className=\"text-sm text-medical-text-primary\" data-testid=\"text-patient-weight\">{patient.doseWeight}</p>\n                )}\n              </div>\n              \n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide mb-2\">Allergies</p>\n                {isEditing ? (\n                  <input \n                    type=\"text\" \n                    value={editData.allergies}\n                    onChange={(e) => setEditData({...editData, allergies: e.target.value})}\n                    className=\"w-full p-2 border rounded text-sm\"\n                    placeholder=\"Enter known allergies\"\n                    data-testid=\"input-allergies\"\n                  />\n                ) : (\n                  <p className={`text-sm ${\n                    patient.allergies && patient.allergies.toLowerCase() !== 'none' \n                      ? 'text-red-600 font-medium' \n                      : 'text-medical-text-primary'\n                  }`} data-testid=\"text-patient-allergies\">\n                    {patient.allergies}\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"bg-slate-50 p-3 rounded-lg\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide mb-2\">Isolation</p>\n                {isEditing ? (\n                  <input \n                    type=\"text\" \n                    value={editData.isolation}\n                    onChange={(e) => setEditData({...editData, isolation: e.target.value})}\n                    className=\"w-full p-2 border rounded text-sm\"\n                    placeholder=\"Isolation precautions\"\n                    data-testid=\"input-isolation\"\n                  />\n                ) : (\n                  <p className=\"text-sm text-medical-text-primary\" data-testid=\"text-patient-isolation\">{patient.isolation}</p>\n                )}\n              </div>\n              \n              <div className=\"bg-slate-50 p-3 rounded-lg md:col-span-3\">\n                <p className=\"text-xs font-medium text-medical-text-muted uppercase tracking-wide mb-2\">Notes</p>\n                {isEditing ? (\n                  <textarea \n                    value={editData.notes}\n                    onChange={(e) => setEditData({...editData, notes: e.target.value})}\n                    className=\"w-full p-2 border rounded text-sm h-20 resize-none\"\n                    placeholder=\"Add clinical notes...\"\n                    data-testid=\"textarea-notes\"\n                  />\n                ) : (\n                  <p className=\"text-sm text-medical-text-primary\" data-testid=\"text-patient-notes\">{patient.notes}</p>\n                )}\n              </div>\n            </div>\n            \n            {/* Save/Cancel/Delete Buttons */}\n            {isEditing && (\n              <div className=\"flex items-center justify-between mt-6 pt-4 border-t border-medical-border\">\n                <button\n                  onClick={() => setShowDeleteModal(true)}\n                  className=\"px-4 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 transition-colors\"\n                  data-testid=\"button-delete-patient\"\n                >\n                  <i className=\"fas fa-trash mr-2\"></i>Delete Patient\n                </button>\n                <div className=\"flex items-center space-x-3\">\n                  <button\n                    onClick={handleCancelEdit}\n                    className=\"px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-800 transition-colors\"\n                    data-testid=\"button-cancel-edit\"\n                  >\n                    Cancel\n                  </button>\n                  <button\n                    onClick={handleSaveEdit}\n                    disabled={updatePatientMutation.isPending}\n                    className=\"px-6 py-2 bg-medical-primary text-white text-sm font-medium rounded-lg hover:bg-medical-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                    data-testid=\"button-save-edit\"\n                  >\n                    {updatePatientMutation.isPending ? (\n                      <><i className=\"fas fa-spinner fa-spin mr-2\"></i>Saving...</>\n                    ) : (\n                      <><i className=\"fas fa-save mr-2\"></i>Save Changes</>\n                    )}\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {/* Patient Navigation Tabs */}\n          <div className=\"px-6\">\n            <nav className=\"flex space-x-8\" aria-label=\"Patient Tabs\">\n              <button \n                onClick={() => setActiveTab('medication')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === 'medication'\n                    ? 'border-medical-primary text-medical-primary'\n                    : 'border-transparent text-medical-text-muted hover:text-medical-text-primary'\n                }`}\n                data-testid=\"tab-medication\"\n              >\n                <i className=\"fas fa-pills mr-2\"></i>Medication Administration\n              </button>\n              <button \n                onClick={() => setActiveTab('chart')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === 'chart'\n                    ? 'border-medical-primary text-medical-primary'\n                    : 'border-transparent text-medical-text-muted hover:text-medical-text-primary'\n                }`}\n                data-testid=\"tab-chart\"\n              >\n                <i className=\"fas fa-file-medical mr-2\"></i>Chart Data\n              </button>\n              <button \n                onClick={() => setActiveTab('prescriptions')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === 'prescriptions'\n                    ? 'border-medical-primary text-medical-primary'\n                    : 'border-transparent text-medical-text-muted hover:text-medical-text-primary'\n                }`}\n                data-testid=\"tab-prescriptions\"\n              >\n                <i className=\"fas fa-prescription-bottle mr-2\"></i>Prescription Management\n              </button>\n              <button \n                onClick={() => setActiveTab('history')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === 'history'\n                    ? 'border-medical-primary text-medical-primary'\n                    : 'border-transparent text-medical-text-muted hover:text-medical-text-primary'\n                }`}\n                data-testid=\"tab-history\"\n              >\n                <i className=\"fas fa-history mr-2\"></i>Administration History\n              </button>\n              <button \n                onClick={() => setActiveTab('labresults')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === 'labresults'\n                    ? 'border-medical-primary text-medical-primary'\n                    : 'border-transparent text-medical-text-muted hover:text-medical-text-primary'\n                }`}\n                data-testid=\"tab-labresults\"\n              >\n                <i className=\"fas fa-vial mr-2\"></i>Lab Results\n              </button>\n              <button \n                onClick={() => setActiveTab('audit')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === 'audit'\n                    ? 'border-medical-primary text-medical-primary'\n                    : 'border-transparent text-medical-text-muted hover:text-medical-text-primary'\n                }`}\n                data-testid=\"tab-audit-log\"\n              >\n                <i className=\"fas fa-clipboard-list mr-2\"></i>Change Log\n              </button>\n            </nav>\n          </div>\n        </div>\n\n        {/* Tab Content */}\n        {activeTab === 'medication' && <MedicationAdmin patient={patient} />}\n        \n        {activeTab === 'prescriptions' && <PrescriptionManager patient={patient} />}\n        \n        {activeTab === 'labresults' && <LabResults patient={patient} />}\n        \n        {activeTab === 'chart' && (\n          <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n            <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">Chart Data</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-medium text-medical-text-primary mb-2\">Background</h4>\n                <div className=\"prose max-w-none text-sm\" dangerouslySetInnerHTML={{ __html: patient.chartData?.background || '<p>No background information available.</p>' }}></div>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-medical-text-primary mb-2\">Summary</h4>\n                <div className=\"prose max-w-none text-sm\" dangerouslySetInnerHTML={{ __html: patient.chartData?.summary || '<p>No summary available.</p>' }}></div>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-medical-text-primary mb-2\">Discharge Plan</h4>\n                <div className=\"prose max-w-none text-sm\" dangerouslySetInnerHTML={{ __html: patient.chartData?.discharge || '<p>No discharge plan available.</p>' }}></div>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-medical-text-primary mb-2\">Handoff</h4>\n                <div className=\"prose max-w-none text-sm\" dangerouslySetInnerHTML={{ __html: patient.chartData?.handoff || '<p>No handoff information available.</p>' }}></div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {activeTab === 'history' && (\n          <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n            <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n              <i className=\"fas fa-history text-medical-primary mr-2\"></i>Administration History\n            </h3>\n            \n            {administrations.length === 0 ? (\n              <div className=\"text-center py-8 text-medical-text-muted\">\n                <i className=\"fas fa-history text-4xl mb-4 opacity-30\"></i>\n                <p className=\"text-lg font-medium mb-2\">No Administrations Yet</p>\n                <p className=\"text-sm\">Medication administrations will appear here once medicines are scanned.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {administrations\n                  .sort((a, b) => new Date(b.administeredAt || 0).getTime() - new Date(a.administeredAt || 0).getTime())\n                  .map((admin) => {\n                    const medicine = medicines.find(m => m.id === admin.medicineId);\n                    const statusColor = admin.status === 'success' ? 'text-green-600' : \n                                       admin.status === 'warning' ? 'text-yellow-600' : 'text-red-600';\n                    const bgColor = admin.status === 'success' ? 'bg-green-50 border-green-200' : \n                                   admin.status === 'warning' ? 'bg-yellow-50 border-yellow-200' : 'bg-red-50 border-red-200';\n                    \n                    return (\n                      <div \n                        key={admin.id} \n                        className={`p-4 rounded-lg border ${bgColor}`}\n                        data-testid={`admin-history-${admin.id}`}\n                      >\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className={`w-3 h-3 rounded-full ${statusColor.replace('text-', 'bg-')}`}></div>\n                            <div>\n                              <h4 className=\"font-medium text-medical-text-primary\">\n                                {medicine?.name || `Medicine ID: ${admin.medicineId}`}\n                              </h4>\n                              <p className=\"text-xs text-medical-text-muted font-mono\">ID: {admin.medicineId}</p>\n                            </div>\n                          </div>\n                          <div className=\"text-right space-y-2\">\n                            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${statusColor} ${bgColor}`}>\n                              <i className={`fas ${admin.status === 'success' ? 'fa-check' : admin.status === 'warning' ? 'fa-exclamation-triangle' : 'fa-times'} mr-1`}></i>\n                              {admin.status.toUpperCase()}\n                            </span>\n                            {admin.administeredAt && (\n                              <div>\n                                <p className=\"text-xs text-medical-text-muted\">\n                                  {new Date(admin.administeredAt).toLocaleString()}\n                                </p>\n                                {admin.status === 'success' && (() => {\n                                  const prescription = prescriptions.find(p => p.medicineId === admin.medicineId);\n                                  return prescription && (\n                                    <div className=\"mt-1\">\n                                      <NextDoseCountdown \n                                        lastAdministeredAt={admin.administeredAt}\n                                        periodicity={prescription.periodicity}\n                                      />\n                                    </div>\n                                  );\n                                })()}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        <p className={`text-sm ${statusColor} font-medium`}>{admin.message}</p>\n                      </div>\n                    );\n                  })}\n              </div>\n            )}\n          </div>\n        )}\n\n        {activeTab === 'audit' && (\n          <AuditLogComponent \n            entityType=\"patient\" \n            entityId={patient.id} \n            title=\"Patient Change Log\" \n          />\n        )}\n      </div>\n\n      {/* Delete Patient PIN Modal */}\n      {showDeleteModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border max-w-md w-full\">\n            <div className=\"p-6 border-b border-medical-border\">\n              <h3 className=\"text-lg font-semibold text-red-600\">\n                <i className=\"fas fa-exclamation-triangle mr-2\"></i>Delete Patient\n              </h3>\n              <p className=\"text-medical-text-muted mt-2\">\n                This action will permanently delete <strong>{patient.name}</strong> and all associated records. This cannot be undone.\n              </p>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"mb-4\">\n                <label htmlFor=\"delete-pin\" className=\"block text-sm font-medium text-medical-text-secondary mb-2\">\n                  Enter PIN code to confirm deletion:\n                </label>\n                <input\n                  id=\"delete-pin\"\n                  type=\"password\"\n                  value={deletePin}\n                  onChange={(e) => setDeletePin(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-medical-border rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                  placeholder=\"Enter PIN\"\n                  data-testid=\"input-delete-pin\"\n                />\n                {deletePin && deletePin !== \"149500\" && (\n                  <p className=\"text-red-600 text-sm mt-1\">Invalid PIN code</p>\n                )}\n              </div>\n              <div className=\"flex items-center justify-end space-x-3\">\n                <button\n                  onClick={handleCloseDeleteModal}\n                  className=\"px-4 py-2 text-sm font-medium text-gray-600 hover:text-gray-800 transition-colors\"\n                  data-testid=\"button-cancel-delete\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handleDeletePatient}\n                  disabled={deletePin !== \"149500\" || deletePatientMutation.isPending}\n                  className=\"px-6 py-2 bg-red-600 text-white text-sm font-medium rounded-lg hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  data-testid=\"button-confirm-delete\"\n                >\n                  {deletePatientMutation.isPending ? (\n                    <><i className=\"fas fa-spinner fa-spin mr-2\"></i>Deleting...</>\n                  ) : (\n                    <><i className=\"fas fa-trash mr-2\"></i>Delete Patient</>\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":30800},"client/src/components/patient-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Patient } from \"@shared/schema\";\n\ninterface PatientDashboardProps {\n  onPatientSelect: (patient: Patient) => void;\n}\n\ntype DepartmentFilter = 'All' | 'Labor & Delivery' | 'Newborn' | 'Postpartum';\n\nexport function PatientDashboard({ onPatientSelect }: PatientDashboardProps) {\n  const [departmentFilter, setDepartmentFilter] = useState<DepartmentFilter>('All');\n\n  const { data: patients = [], isLoading } = useQuery<Patient[]>({\n    queryKey: ['/api/patients'],\n  });\n\n  const filteredPatients = departmentFilter === 'All' \n    ? patients \n    : patients.filter(patient => patient.department === departmentFilter);\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case 'critical': return 'bg-red-100 text-red-800 border-red-200';\n      case 'active labor': return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'fair': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'good': \n      case 'stable': \n      case 'healthy': return 'bg-green-100 text-green-800 border-green-200';\n      case 'improving':\n      case 'recovering': return 'bg-blue-100 text-blue-800 border-blue-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const hasAllergies = (allergies: string) => {\n    return allergies && allergies.toLowerCase() !== 'none';\n  };\n\n  const getDepartmentStats = () => {\n    const stats = patients.reduce((acc, patient) => {\n      acc[patient.department] = (acc[patient.department] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    return {\n      total: patients.length,\n      'Labor & Delivery': stats['Labor & Delivery'] || 0,\n      'Newborn': stats['Newborn'] || 0,\n      'Postpartum': stats['Postpartum'] || 0,\n      'Medical': stats['Medical'] || 0,\n    };\n  };\n\n  const stats = getDepartmentStats();\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Department Statistics */}\n      <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n        <div className=\"bg-white p-4 rounded-lg border border-medical-border text-center\">\n          <p className=\"text-2xl font-bold text-medical-text-primary\">{stats.total}</p>\n          <p className=\"text-sm text-medical-text-muted\">Total Patients</p>\n        </div>\n        <div className=\"bg-purple-50 p-4 rounded-lg border border-purple-200 text-center\">\n          <p className=\"text-2xl font-bold text-purple-700\">{stats['Labor & Delivery']}</p>\n          <p className=\"text-sm text-purple-600\">Labor & Delivery</p>\n        </div>\n        <div className=\"bg-pink-50 p-4 rounded-lg border border-pink-200 text-center\">\n          <p className=\"text-2xl font-bold text-pink-700\">{stats['Postpartum']}</p>\n          <p className=\"text-sm text-pink-600\">Postpartum</p>\n        </div>\n        <div className=\"bg-blue-50 p-4 rounded-lg border border-blue-200 text-center\">\n          <p className=\"text-2xl font-bold text-blue-700\">{stats['Newborn']}</p>\n          <p className=\"text-sm text-blue-600\">Newborn</p>\n        </div>\n        <div className=\"bg-teal-50 p-4 rounded-lg border border-teal-200 text-center\">\n          <p className=\"text-2xl font-bold text-teal-700\">{stats['Medical']}</p>\n          <p className=\"text-sm text-teal-600\">Medical</p>\n        </div>\n      </div>\n\n      {/* Department Filter */}\n      <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-medical-text-primary\">\n            <i className=\"fas fa-users text-medical-primary mr-2\"></i>Patient Dashboard\n          </h3>\n          <div className=\"flex space-x-2\">\n            {(['All', 'Labor & Delivery', 'Newborn', 'Postpartum'] as DepartmentFilter[]).map((dept) => (\n              <button\n                key={dept}\n                onClick={() => setDepartmentFilter(dept)}\n                className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${\n                  departmentFilter === dept\n                    ? 'bg-medical-primary text-white'\n                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n                }`}\n                data-testid={`filter-${dept.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {dept}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Patient Table */}\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"border-b border-medical-border\">\n                <th className=\"text-left py-3 px-4 font-medium text-medical-text-secondary\">Name</th>\n                <th className=\"text-left py-3 px-4 font-medium text-medical-text-secondary\">Bed</th>\n                <th className=\"text-left py-3 px-4 font-medium text-medical-text-secondary\">Age</th>\n                <th className=\"text-left py-3 px-4 font-medium text-medical-text-secondary\">Allergies</th>\n                <th className=\"text-left py-3 px-4 font-medium text-medical-text-secondary\">Status</th>\n                <th className=\"text-left py-3 px-4 font-medium text-medical-text-secondary\">Provider</th>\n                <th className=\"text-left py-3 px-4 font-medium text-medical-text-secondary\">Notes</th>\n                <th className=\"text-left py-3 px-4 font-medium text-medical-text-secondary\">Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredPatients.length === 0 ? (\n                <tr>\n                  <td colSpan={8} className=\"text-center py-8 text-medical-text-muted\">\n                    {departmentFilter === 'All' ? 'No patients found' : `No patients in ${departmentFilter}`}\n                  </td>\n                </tr>\n              ) : (\n                filteredPatients.map((patient) => (\n                  <tr \n                    key={patient.id} \n                    className=\"border-b border-gray-100 hover:bg-gray-50 transition-colors\"\n                    data-testid={`patient-row-${patient.id}`}\n                  >\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-gradient-to-br from-medical-primary to-teal-600 rounded-full flex items-center justify-center text-white text-sm font-bold\">\n                          {patient.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-medical-text-primary\" data-testid={`name-${patient.id}`}>\n                            {patient.name}\n                          </p>\n                          <p className=\"text-xs text-medical-text-muted\">{patient.department}</p>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <span className=\"font-mono text-medical-text-primary font-medium\" data-testid={`bed-${patient.id}`}>\n                        {patient.bed}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <span className=\"text-medical-text-primary\" data-testid={`age-${patient.id}`}>\n                        {patient.age}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        {hasAllergies(patient.allergies) && (\n                          <i className=\"fas fa-exclamation-triangle text-red-500\" title=\"Has allergies\" data-testid={`allergy-alert-${patient.id}`}></i>\n                        )}\n                        <span className={`text-sm ${hasAllergies(patient.allergies) ? 'text-red-600 font-medium' : 'text-gray-500'}`} data-testid={`allergies-${patient.id}`}>\n                          {patient.allergies}\n                        </span>\n                      </div>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <span className={`inline-flex px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(patient.status)}`} data-testid={`status-${patient.id}`}>\n                        {patient.status}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <span className=\"text-medical-text-primary text-sm\" data-testid={`provider-${patient.id}`}>\n                        {patient.provider}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <span \n                        className=\"text-medical-text-muted text-sm truncate max-w-xs block\" \n                        title={patient.notes}\n                        data-testid={`notes-${patient.id}`}\n                      >\n                        {patient.notes || 'No notes'}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4\">\n                      <button\n                        onClick={() => onPatientSelect(patient)}\n                        className=\"bg-medical-primary hover:bg-teal-800 text-white px-3 py-1 rounded-lg text-sm font-medium transition-colors\"\n                        data-testid={`view-patient-${patient.id}`}\n                      >\n                        <i className=\"fas fa-eye mr-1\"></i>View\n                      </button>\n                    </td>\n                  </tr>\n                ))\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10002},"client/src/components/patient-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type InsertPatient } from \"@shared/schema\";\n\ninterface PatientFormProps {\n  onPatientAdded: () => void;\n}\n\nconst generateNewPatientId = () => {\n  return Math.floor(100000000000 + Math.random() * 900000000000).toString();\n};\n\nexport function PatientForm({ onPatientAdded }: PatientFormProps) {\n  const [showWarning, setShowWarning] = useState(true);\n  const [generatedId] = useState(() => generateNewPatientId());\n  const [formData, setFormData] = useState<Omit<InsertPatient, 'id' | 'chartData'>>({\n    name: '',\n    dob: '',\n    age: 0,\n    doseWeight: '',\n    sex: 'Female',\n    mrn: '',\n    fin: '',\n    admitted: '',\n    codeStatus: 'Full Code',\n    isolation: 'None',\n    bed: '',\n    allergies: 'None',\n    status: 'Stable',\n    provider: '',\n    notes: '',\n    department: 'Labor & Delivery'\n  });\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const createPatientMutation = useMutation({\n    mutationFn: async (patient: InsertPatient) => {\n      const response = await apiRequest('POST', '/api/patients', patient);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Patient registered successfully\",\n        description: `${data.name} has been added with ID: ${data.id}`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      onPatientAdded();\n    },\n    onError: () => {\n      toast({\n        title: \"Registration failed\",\n        description: \"Failed to register patient. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ \n      ...prev, \n      [name]: name === 'age' ? parseInt(value, 10) || 0 : value \n    }));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    const patient: InsertPatient = {\n      ...formData,\n      id: generatedId,\n      chartData: {\n        background: '',\n        summary: '',\n        discharge: '',\n        handoff: ''\n      }\n    };\n    createPatientMutation.mutate(patient);\n  };\n\n  return (\n    <>\n      {/* PII Warning Modal */}\n      {showWarning && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border p-6 max-w-md mx-4 w-full\">\n            <div className=\"text-center mb-6\">\n              <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-exclamation-triangle text-orange-600 text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-bold text-medical-text-primary mb-2\">Training Environment Warning</h3>\n              <div className=\"text-left space-y-3 text-sm text-medical-text-secondary\">\n                <p className=\"font-semibold text-orange-600\">⚠️ DO NOT ENTER REAL PATIENT INFORMATION</p>\n                <p>This is a training application. For educational purposes only:</p>\n                <ul className=\"list-disc ml-5 space-y-1\">\n                  <li>Use fictional names and data only</li>\n                  <li>Do not enter real patient information</li>\n                  <li>Do not enter real personal identifiable information (PII)</li>\n                  <li>Data entered may not be secure or private</li>\n                </ul>\n                <p className=\"font-medium text-medical-text-primary\">Examples of safe test data:</p>\n                <ul className=\"list-disc ml-5 space-y-1 text-xs\">\n                  <li>Names: \"John Doe\", \"Jane Smith\", \"Test Patient\"</li>\n                  <li>Use fictional dates and information</li>\n                </ul>\n              </div>\n            </div>\n            \n            <button\n              onClick={() => setShowWarning(false)}\n              className=\"w-full px-4 py-3 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 font-medium transition-colors\"\n              data-testid=\"button-understand-warning\"\n            >\n              <i className=\"fas fa-check mr-2\"></i>I Understand - Continue to Form\n            </button>\n          </div>\n        </div>\n      )}\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-2xl font-bold text-medical-text-primary mb-2\">Register New Patient</h3>\n        <p className=\"text-medical-text-muted\">Enter complete patient information for medical record creation</p>\n      </div>\n\n      {/* Generated Patient ID Display */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-center\">\n        <p className=\"text-sm font-medium text-medical-text-secondary mb-1\">Generated Patient ID (Barcode)</p>\n        <p className=\"text-2xl font-mono font-bold text-medical-primary\" data-testid=\"text-generated-id\">{generatedId}</p>\n        <p className=\"text-xs text-medical-text-muted mt-1\">This ID will be printed on the patient wristband</p>\n      </div>\n\n      {/* Patient Information Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        \n        {/* Personal Information */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold text-medical-text-primary border-b border-medical-border pb-2\">Personal Information</h4>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Full Name *</label>\n            <input \n              type=\"text\" \n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              required \n              className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\" \n              placeholder=\"Enter patient's full name\"\n              data-testid=\"input-patient-name\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Date of Birth *</label>\n              <input \n                type=\"date\" \n                name=\"dob\"\n                value={formData.dob}\n                onChange={handleChange}\n                required \n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\"\n                data-testid=\"input-patient-dob\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Age *</label>\n              <input \n                type=\"number\" \n                name=\"age\"\n                value={formData.age}\n                onChange={handleChange}\n                required \n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\" \n                placeholder=\"Age\"\n                data-testid=\"input-patient-age\"\n              />\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Sex *</label>\n              <select \n                name=\"sex\"\n                value={formData.sex}\n                onChange={handleChange}\n                required \n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent bg-white\"\n                data-testid=\"select-patient-sex\"\n              >\n                <option value=\"Female\">Female</option>\n                <option value=\"Male\">Male</option>\n                <option value=\"Other\">Other</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Dose Weight *</label>\n              <input \n                type=\"text\" \n                name=\"doseWeight\"\n                value={formData.doseWeight}\n                onChange={handleChange}\n                required \n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\" \n                placeholder=\"e.g., 70 kg\"\n                data-testid=\"input-patient-weight\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Medical Information */}\n        <div className=\"space-y-4\">\n          <h4 className=\"font-semibold text-medical-text-primary border-b border-medical-border pb-2\">Medical Information</h4>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">MRN *</label>\n              <input \n                type=\"text\" \n                name=\"mrn\"\n                value={formData.mrn}\n                onChange={handleChange}\n                required \n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\" \n                placeholder=\"Medical Record Number\"\n                data-testid=\"input-patient-mrn\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">FIN *</label>\n              <input \n                type=\"text\" \n                name=\"fin\"\n                value={formData.fin}\n                onChange={handleChange}\n                required \n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\" \n                placeholder=\"Financial Number\"\n                data-testid=\"input-patient-fin\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Admission Date *</label>\n            <input \n              type=\"date\" \n              name=\"admitted\"\n              value={formData.admitted}\n              onChange={handleChange}\n              required \n              className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\"\n              data-testid=\"input-patient-admitted\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Code Status *</label>\n            <select \n              name=\"codeStatus\"\n              value={formData.codeStatus}\n              onChange={handleChange}\n              required \n              className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent bg-white\"\n              data-testid=\"select-patient-code-status\"\n            >\n              <option value=\"Full Code\">Full Code</option>\n              <option value=\"DNR/DNI\">DNR/DNI</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Isolation Precautions</label>\n            <select \n              name=\"isolation\"\n              value={formData.isolation}\n              onChange={handleChange}\n              className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent bg-white\"\n              data-testid=\"select-patient-isolation\"\n            >\n              <option value=\"None\">None</option>\n              <option value=\"Contact Precautions\">Contact Precautions</option>\n              <option value=\"Droplet Precautions\">Droplet Precautions</option>\n              <option value=\"Airborne Precautions\">Airborne Precautions</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Department *</label>\n            <select \n              name=\"department\"\n              value={formData.department}\n              onChange={handleChange}\n              required \n              className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent bg-white\"\n              data-testid=\"select-patient-department\"\n            >\n              <option value=\"Labor & Delivery\">Labor & Delivery</option>\n              <option value=\"Postpartum\">Postpartum</option>\n              <option value=\"Newborn\">Newborn</option>\n              <option value=\"Medical\">Medical</option>\n            </select>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Bed Assignment *</label>\n              <input \n                type=\"text\" \n                name=\"bed\"\n                value={formData.bed}\n                onChange={handleChange}\n                required \n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\" \n                placeholder=\"e.g., LD-102\"\n                data-testid=\"input-patient-bed\"\n              />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Status *</label>\n              <select \n                name=\"status\"\n                value={formData.status}\n                onChange={handleChange}\n                required \n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent bg-white\"\n                data-testid=\"select-patient-status\"\n              >\n                <option value=\"Stable\">Stable</option>\n                <option value=\"Good\">Good</option>\n                <option value=\"Fair\">Fair</option>\n                <option value=\"Critical\">Critical</option>\n                <option value=\"Active Labor\">Active Labor</option>\n                <option value=\"Recovering\">Recovering</option>\n                <option value=\"Improving\">Improving</option>\n                <option value=\"Healthy\">Healthy</option>\n              </select>\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Attending Provider *</label>\n            <input \n              type=\"text\" \n              name=\"provider\"\n              value={formData.provider}\n              onChange={handleChange}\n              required \n              className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\" \n              placeholder=\"e.g., Dr. Sarah Johnson\"\n              data-testid=\"input-patient-provider\"\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Allergies</label>\n            <input \n              type=\"text\" \n              name=\"allergies\"\n              value={formData.allergies}\n              onChange={handleChange}\n              className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent\" \n              placeholder=\"e.g., Penicillin, None\"\n              data-testid=\"input-patient-allergies\"\n            />\n          </div>\n        </div>\n      </div>\n      \n      {/* Additional Notes */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-semibold text-medical-text-primary border-b border-medical-border pb-2\">Clinical Notes</h4>\n        <div>\n          <label className=\"block text-sm font-medium text-medical-text-secondary mb-2\">Notes</label>\n          <textarea \n            name=\"notes\"\n            value={formData.notes}\n            onChange={handleChange}\n            rows={3}\n            className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent resize-none\" \n            placeholder=\"Clinical notes, care instructions, or observations...\"\n            data-testid=\"textarea-patient-notes\"\n          />\n        </div>\n      </div>\n\n      {/* Form Actions */}\n      <div className=\"flex justify-center space-x-4 pt-6 border-t border-medical-border\">\n        <button \n          type=\"button\" \n          onClick={onPatientAdded}\n          className=\"px-6 py-3 border border-gray-300 text-gray-700 font-medium rounded-lg hover:bg-gray-50 transition-colors duration-200\"\n          data-testid=\"button-cancel-registration\"\n        >\n          Cancel\n        </button>\n        <button \n          type=\"submit\" \n          disabled={createPatientMutation.isPending}\n          className=\"px-6 py-3 bg-medical-primary hover:bg-teal-800 text-white font-medium rounded-lg transition-colors duration-200 disabled:opacity-50\"\n          data-testid=\"button-save-patient\"\n        >\n          <i className=\"fas fa-save mr-2\"></i>\n          {createPatientMutation.isPending ? 'Saving...' : 'Save Patient'}\n        </button>\n      </div>\n    </form>\n    </>\n  );\n}\n","size_bytes":17947},"client/src/components/patient-scanner.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Patient } from \"@shared/schema\";\n\ninterface PatientScannerProps {\n  onPatientFound: (patient: Patient) => void;\n}\n\nexport function PatientScanner({ onPatientFound }: PatientScannerProps) {\n  const [patientId, setPatientId] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    inputRef.current?.focus();\n  }, []);\n\n  const { refetch: fetchPatient } = useQuery({\n    queryKey: ['/api/patients', patientId],\n    enabled: false,\n    retry: false,\n  });\n\n  const handleKeyPress = async (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      const id = patientId.trim();\n      if (!id) return;\n\n      try {\n        const result = await fetchPatient();\n        if (result.data) {\n          onPatientFound(result.data);\n          setError(\"\");\n          setPatientId(\"\");\n        } else {\n          setError(\"Patient ID not found. Please try again.\");\n          inputRef.current?.select();\n        }\n      } catch (err) {\n        setError(\"Patient ID not found. Please try again.\");\n        inputRef.current?.select();\n      }\n    }\n  };\n\n  return (\n    <div className=\"text-center max-w-lg mx-auto\">\n      <div className=\"mb-6\">\n        <i className=\"fas fa-qrcode text-6xl text-medical-primary mb-4\"></i>\n        <h3 className=\"text-2xl font-bold text-medical-text-primary mb-2\">Scan Patient Barcode</h3>\n        <p className=\"text-medical-text-muted\">Use your scanner or manually enter the patient ID below</p>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <input \n          ref={inputRef}\n          type=\"text\" \n          value={patientId}\n          onChange={(e) => setPatientId(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Scan or Enter Patient ID...\" \n          className=\"w-full text-center text-lg p-4 border-2 border-medical-border rounded-xl focus:outline-none focus:ring-2 focus:ring-medical-primary focus:border-transparent transition duration-200\"\n          data-testid=\"input-patient-id\"\n        />\n        \n        {error && (\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg text-red-700\" data-testid=\"error-patient-not-found\">\n            <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n            {error}\n          </div>\n        )}\n      </div>\n\n      <div className=\"mt-8 p-6 bg-slate-50 rounded-lg\">\n        <h4 className=\"font-semibold text-medical-text-primary mb-3\">How to Use Scanner:</h4>\n        <ul className=\"text-sm text-medical-text-muted space-y-2 text-left\">\n          <li><i className=\"fas fa-circle text-xs mr-2\"></i>Point scanner at patient wristband barcode</li>\n          <li><i className=\"fas fa-circle text-xs mr-2\"></i>Wait for successful beep confirmation</li>\n          <li><i className=\"fas fa-circle text-xs mr-2\"></i>Patient information will load automatically</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3037},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { PatientDashboard } from \"@/components/patient-dashboard\";\nimport { PatientChart } from \"@/components/patient-chart\";\nimport { DatabaseManagement } from \"@/components/database-management\";\nimport { type Patient } from \"@shared/schema\";\n\nexport default function Dashboard() {\n  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null);\n  const [showDbManagement, setShowDbManagement] = useState(false);\n  const [showPinModal, setShowPinModal] = useState(false);\n  const [pin, setPin] = useState(\"\");\n\n  const handlePatientSelect = (patient: Patient) => {\n    setSelectedPatient(patient);\n  };\n\n  const handleClearPatient = () => {\n    setSelectedPatient(null);\n  };\n\n  const handleProfileClick = () => {\n    setShowPinModal(true);\n    setPin(\"\");\n  };\n\n  const handlePinSubmit = () => {\n    if (pin === \"149500\") {\n      setShowPinModal(false);\n      setShowDbManagement(true);\n    } else {\n      alert(\"Incorrect PIN. Access denied.\");\n    }\n    setPin(\"\");\n  };\n\n  const handleCloseDbManagement = () => {\n    setShowDbManagement(false);\n  };\n\n  if (selectedPatient) {\n    return <PatientChart patient={selectedPatient} onClear={handleClearPatient} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-medical-background to-slate-100\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-medical-border shadow-sm\" data-testid=\"header-dashboard\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-medical-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-hospital-symbol text-white text-lg\"></i>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-medical-text-primary\">MedChart Pro</h1>\n                <p className=\"text-sm text-medical-text-muted\">Patient Dashboard</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <button className=\"bg-medical-secondary hover:bg-cyan-900 text-white px-4 py-2 rounded-lg font-medium transition-colors\" data-testid=\"link-home\">\n                  <i className=\"fas fa-home mr-2\"></i>Home\n                </button>\n              </Link>\n              <button \n                onClick={handleProfileClick}\n                className=\"w-8 h-8 bg-medical-secondary rounded-full flex items-center justify-center hover:bg-medical-secondary/90 transition-colors\"\n                data-testid=\"button-profile\"\n              >\n                <i className=\"fas fa-cog text-white text-sm\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Welcome Section */}\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-3xl font-bold text-medical-text-primary mb-2\">Patient Dashboard</h2>\n          <p className=\"text-medical-text-secondary max-w-2xl mx-auto\">\n            Monitor all patients at a glance with filtering by department and comprehensive patient information.\n          </p>\n        </div>\n\n        <PatientDashboard onPatientSelect={handlePatientSelect} />\n      </div>\n\n      {/* PIN Modal */}\n      {showPinModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border p-6 max-w-md mx-4 w-full\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-medical-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-lock text-white text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold text-medical-text-primary mb-2\">Database Management Access</h3>\n              <p className=\"text-medical-text-secondary mb-6\">Enter PIN to access database management</p>\n              \n              <div className=\"mb-6\">\n                <input\n                  type=\"password\"\n                  value={pin}\n                  onChange={(e) => setPin(e.target.value)}\n                  placeholder=\"Enter PIN\"\n                  className=\"w-full p-4 text-center text-2xl font-mono border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                  maxLength={6}\n                  data-testid=\"input-pin\"\n                  onKeyPress={(e) => e.key === 'Enter' && handlePinSubmit()}\n                />\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={() => {setShowPinModal(false); setPin(\"\");}}\n                  className=\"flex-1 px-4 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors\"\n                  data-testid=\"button-cancel-pin\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handlePinSubmit}\n                  disabled={!pin}\n                  className=\"flex-1 px-4 py-3 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  data-testid=\"button-submit-pin\"\n                >\n                  Access\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Database Management Modal */}\n      <DatabaseManagement \n        isOpen={showDbManagement} \n        onClose={handleCloseDbManagement} \n      />\n    </div>\n  );\n}","size_bytes":5838},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { LabOrder } from \"@/components/lab-order\";\nimport { PatientScanner } from \"@/components/patient-scanner\";\nimport { PatientForm } from \"@/components/patient-form\";\nimport { PatientChart } from \"@/components/patient-chart\";\nimport { DatabaseManagement } from \"@/components/database-management\";\nimport { type Patient } from \"@shared/schema\";\n\nexport default function Home() {\n  const [currentPatient, setCurrentPatient] = useState<Patient | null>(null);\n  const [activeTab, setActiveTab] = useState<'scan' | 'add'>('scan');\n  const [showDbManagement, setShowDbManagement] = useState(false);\n  const [showPinModal, setShowPinModal] = useState(false);\n  const [pin, setPin] = useState(\"\");\n  const [showLabOrder, setShowLabOrder] = useState(false);\n\n  const handlePatientFound = (patient: Patient) => {\n    setCurrentPatient(patient);\n  };\n\n  const handleOrderComplete = () => {\n    setShowLabOrder(false);\n  };\n\n  const handlePatientAdded = () => {\n    setActiveTab('scan');\n  };\n\n  const handleClearPatient = () => {\n    setCurrentPatient(null);\n  };\n\n  const handleProfileClick = () => {\n    setShowPinModal(true);\n    setPin(\"\");\n  };\n\n  const handlePinSubmit = () => {\n    if (pin === \"149500\") {\n      setShowPinModal(false);\n      setShowDbManagement(true);\n    } else {\n      alert(\"Incorrect PIN. Access denied.\");\n    }\n    setPin(\"\");\n  };\n\n  const handleCloseDbManagement = () => {\n    setShowDbManagement(false);\n  };\n\n  if (currentPatient) {\n    return <PatientChart patient={currentPatient} onClear={handleClearPatient} />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-medical-background to-slate-100\">\n      {/* Header */}\n      <header className=\"bg-white border-b border-medical-border shadow-sm\" data-testid=\"header-main\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-medical-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-hospital-symbol text-white text-lg\"></i>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-medical-text-primary\">MedChart Pro</h1>\n                <p className=\"text-sm text-medical-text-muted\">Patient Management System</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/dashboard\">\n                <button className=\"bg-medical-secondary hover:bg-cyan-900 text-white px-4 py-2 rounded-lg font-medium transition-colors\" data-testid=\"link-dashboard\">\n                  <i className=\"fas fa-tachometer-alt mr-2\"></i>Dashboard\n                </button>\n              </Link>\n              <button \n                onClick={handleProfileClick}\n                className=\"w-8 h-8 bg-medical-secondary rounded-full flex items-center justify-center hover:bg-medical-secondary/90 transition-colors\"\n                data-testid=\"button-profile\"\n              >\n                <i className=\"fas fa-cog text-white text-sm\"></i>\n              </button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n        {/* Welcome Section */}\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-3xl font-bold text-medical-text-primary mb-2\">Patient Chart System</h2>\n          <p className=\"text-medical-text-secondary max-w-2xl mx-auto\">\n            Securely manage patient records, verify medications, and track administration with our comprehensive healthcare platform.\n          </p>\n        </div>\n\n        {/* Quick Actions Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6 hover:shadow-medical-lg transition-shadow duration-200\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-medical-primary rounded-lg mb-4 mx-auto\">\n              <i className=\"fas fa-vial text-white text-xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-semibold text-medical-text-primary text-center mb-2\">Order Labs</h3>\n            <p className=\"text-medical-text-muted text-center text-sm mb-4\">Generate laboratory test results for patients</p>\n            <button \n              onClick={() => setShowLabOrder(true)}\n              className=\"w-full bg-medical-primary hover:bg-teal-800 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200\"\n              data-testid=\"button-order-labs\"\n            >\n              Order Tests\n            </button>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6 hover:shadow-medical-lg transition-shadow duration-200\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-medical-secondary rounded-lg mb-4 mx-auto\">\n              <i className=\"fas fa-user-plus text-white text-xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-semibold text-medical-text-primary text-center mb-2\">New Patient</h3>\n            <p className=\"text-medical-text-muted text-center text-sm mb-4\">Register a new patient in the system</p>\n            <button \n              onClick={() => setActiveTab('add')}\n              className=\"w-full bg-medical-secondary hover:bg-cyan-900 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200\"\n              data-testid=\"button-add-patient\"\n            >\n              Add Patient\n            </button>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n            <div className=\"flex items-center justify-center w-12 h-12 bg-blue-600 rounded-lg mb-4 mx-auto\">\n              <i className=\"fas fa-tachometer-alt text-white text-xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-semibold text-medical-text-primary text-center mb-2\">Patient Dashboard</h3>\n            <p className=\"text-medical-text-muted text-center text-sm mb-4\">View all patients with filtering options</p>\n            <Link href=\"/dashboard\">\n              <button className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors duration-200\" data-testid=\"button-view-dashboard\">\n                View Dashboard\n              </button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className=\"bg-white rounded-xl shadow-medical border border-medical-border\">\n          {/* Tab Navigation */}\n          <div className=\"border-b border-medical-border\">\n            <nav className=\"flex justify-center\" aria-label=\"Tabs\">\n              <button \n                onClick={() => setActiveTab('scan')}\n                className={`px-6 py-4 text-sm font-medium border-b-2 ${\n                  activeTab === 'scan' \n                    ? 'border-medical-primary text-medical-primary' \n                    : 'border-transparent text-medical-text-muted hover:text-medical-text-primary hover:border-gray-300'\n                }`}\n                data-testid=\"tab-scan\"\n              >\n                <i className=\"fas fa-qrcode mr-2\"></i>Scan Patient\n              </button>\n              <button \n                onClick={() => setActiveTab('add')}\n                className={`px-6 py-4 text-sm font-medium border-b-2 ${\n                  activeTab === 'add' \n                    ? 'border-medical-primary text-medical-primary' \n                    : 'border-transparent text-medical-text-muted hover:text-medical-text-primary hover:border-gray-300'\n                }`}\n                data-testid=\"tab-add\"\n              >\n                <i className=\"fas fa-user-plus mr-2\"></i>Register Patient\n              </button>\n            </nav>\n          </div>\n\n          {/* Tab Content */}\n          <div className=\"p-8\">\n            {activeTab === 'scan' ? (\n              <PatientScanner onPatientFound={handlePatientFound} />\n            ) : (\n              <PatientForm onPatientAdded={handlePatientAdded} />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* PIN Modal */}\n      {showPinModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border p-6 max-w-md mx-4 w-full\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-medical-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-lock text-white text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold text-medical-text-primary mb-2\">Database Management Access</h3>\n              <p className=\"text-medical-text-secondary mb-6\">Enter PIN to access database management</p>\n              \n              <div className=\"mb-6\">\n                <input\n                  type=\"password\"\n                  value={pin}\n                  onChange={(e) => setPin(e.target.value)}\n                  placeholder=\"Enter PIN\"\n                  className=\"w-full p-4 text-center text-2xl font-mono border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                  maxLength={6}\n                  data-testid=\"input-pin\"\n                  onKeyPress={(e) => e.key === 'Enter' && handlePinSubmit()}\n                />\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={() => {setShowPinModal(false); setPin(\"\");}}\n                  className=\"flex-1 px-4 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors\"\n                  data-testid=\"button-cancel-pin\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handlePinSubmit}\n                  disabled={!pin}\n                  className=\"flex-1 px-4 py-3 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  data-testid=\"button-submit-pin\"\n                >\n                  Access\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Database Management Modal */}\n      <DatabaseManagement \n        isOpen={showDbManagement} \n        onClose={handleCloseDbManagement} \n      />\n\n      {/* Lab Order Modal */}\n      {showLabOrder && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border max-w-4xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"sticky top-0 bg-white border-b border-medical-border p-4 flex items-center justify-between\">\n              <h2 className=\"text-xl font-semibold text-medical-text-primary\">\n                <i className=\"fas fa-vial mr-2\"></i>Order Laboratory Tests\n              </h2>\n              <button\n                onClick={() => setShowLabOrder(false)}\n                className=\"w-8 h-8 bg-gray-200 hover:bg-gray-300 rounded-full flex items-center justify-center transition-colors\"\n                data-testid=\"button-close-lab-order\"\n              >\n                <i className=\"fas fa-times\"></i>\n              </button>\n            </div>\n            <div className=\"p-6\">\n              <LabOrder onOrderComplete={handleOrderComplete} />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11848},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/audit-log.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { type AuditLog } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface AuditLogProps {\n  entityType: string;\n  entityId: string;\n  title?: string;\n}\n\nexport function AuditLogComponent({ entityType, entityId, title = \"Change Log\" }: AuditLogProps) {\n  const { data: auditLogs = [], isLoading } = useQuery<AuditLog[]>({\n    queryKey: ['/api/audit', entityType, entityId],\n  });\n\n  const getActionIcon = (action: string) => {\n    switch (action) {\n      case 'create': return 'fa-plus-circle';\n      case 'update': return 'fa-edit';\n      case 'administer': return 'fa-syringe';\n      case 'delete': return 'fa-trash';\n      default: return 'fa-info-circle';\n    }\n  };\n\n  const getActionColor = (action: string) => {\n    switch (action) {\n      case 'create': return 'text-green-600';\n      case 'update': return 'text-blue-600';\n      case 'administer': return 'text-purple-600';\n      case 'delete': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getActionLabel = (action: string, entityType: string) => {\n    switch (action) {\n      case 'create': return `${entityType} created`;\n      case 'update': return `${entityType} updated`;\n      case 'administer': return 'Medicine administered';\n      case 'delete': return `${entityType} deleted`;\n      default: return action;\n    }\n  };\n\n  const formatChanges = (changes: Record<string, any> | null) => {\n    if (!changes) return null;\n    \n    return Object.entries(changes).map(([key, value]) => (\n      <span key={key} className=\"inline-block bg-gray-100 text-gray-700 px-2 py-1 rounded text-xs mr-2 mb-1\">\n        <strong>{key}:</strong> {typeof value === 'object' ? JSON.stringify(value) : String(value)}\n      </span>\n    ));\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n        <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n          <i className=\"fas fa-history text-medical-primary mr-2\"></i>{title}\n        </h3>\n        <div className=\"flex items-center justify-center h-32\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-medical-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n      <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n        <i className=\"fas fa-history text-medical-primary mr-2\"></i>{title}\n      </h3>\n      \n      <div className=\"max-h-96 overflow-y-auto\">\n        {auditLogs.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <i className=\"fas fa-clipboard-list text-4xl text-gray-300 mb-4\"></i>\n            <p className=\"text-gray-500\">No changes recorded yet</p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {auditLogs.map((log) => (\n              <div \n                key={log.id} \n                className=\"flex items-start space-x-3 p-4 bg-gray-50 rounded-lg border border-gray-200\"\n                data-testid={`audit-log-${log.id}`}\n              >\n                <div className={`flex-shrink-0 mt-1 ${getActionColor(log.action)}`}>\n                  <i className={`fas ${getActionIcon(log.action)}`}></i>\n                </div>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <p className=\"font-medium text-gray-900\">\n                      {getActionLabel(log.action, log.entityType)}\n                    </p>\n                    <time \n                      className=\"text-sm text-gray-500\" \n                      title={log.timestamp ? new Date(log.timestamp).toLocaleString() : 'Unknown time'}\n                      data-testid={`audit-time-${log.id}`}\n                    >\n                      {log.timestamp ? formatDistanceToNow(new Date(log.timestamp), { addSuffix: true }) : 'Unknown time'}\n                    </time>\n                  </div>\n                  \n                  {log.changes && (\n                    <div className=\"mt-2\">\n                      <p className=\"text-sm text-gray-600 mb-2\">Changes:</p>\n                      <div className=\"flex flex-wrap\">\n                        {formatChanges(log.changes)}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":4588},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { patients, medicines, prescriptions, labTestTypes, labResults } from \"@shared/schema\";\n\nconst initialPatients = [\n  {\n    id: '112233445566',\n    name: 'Olivia Chen',\n    dob: '1988-05-21',\n    age: 37,\n    doseWeight: '68 kg',\n    sex: 'Female',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-22',\n    codeStatus: 'Full Code',\n    isolation: 'None',\n    bed: 'LD-102',\n    allergies: 'None',\n    status: 'Stable',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Labor & Delivery',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    }\n  },\n  {\n    id: '223344556677',\n    name: 'Benjamin Carter',\n    dob: '1954-11-10',\n    age: 70,\n    doseWeight: '85 kg',\n    sex: 'Male',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-20',\n    codeStatus: 'DNR/DNI',\n    isolation: 'Contact Precautions (MRSA)',\n    bed: 'ICU-205',\n    allergies: 'Penicillin',\n    status: 'Improving',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Medical',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    }\n  },\n  {\n    id: '334455667788',\n    name: 'Maria Rodriguez',\n    dob: '1995-03-15',\n    age: 29,\n    doseWeight: '62 kg',\n    sex: 'Female',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-23',\n    codeStatus: 'Full Code',\n    isolation: 'None',\n    bed: 'PP-108',\n    allergies: 'Latex, Shellfish',\n    status: 'Good',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Postpartum',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    }\n  },\n  {\n    id: '445566778899',\n    name: 'Baby Rodriguez',\n    dob: '2025-08-23',\n    age: 0,\n    doseWeight: '3.2 kg',\n    sex: 'Female',\n    mrn: 'Place holder',\n    fin: 'Place holder',\n    admitted: '2025-08-23',\n    codeStatus: 'Full Code',\n    isolation: 'None',\n    bed: 'NB-201',\n    allergies: 'None known',\n    status: 'Healthy',\n    provider: 'Place holder',\n    notes: 'Place holder',\n    department: 'Newborn',\n    chartData: {\n      background: 'Place holder',\n      summary: 'Place holder',\n      discharge: 'Place holder',\n      handoff: 'Place holder'\n    }\n  }\n];\n\nconst initialMedicines = [\n  { id: '31908432', name: 'Acetaminophen' },\n  { id: '95283134', name: 'Ibuprofen' },\n  { id: '60329247', name: 'Amoxicillin' },\n  { id: '09509828', name: 'Metformin' },\n  { id: '20944348', name: 'Lisinopril' }\n];\n\nconst initialPrescriptions = [\n  { id: '1', patientId: '112233445566', medicineId: '31908432', dosage: '500mg', periodicity: 'Every 6 hours', duration: '7 days', startDate: new Date('2025-08-26'), endDate: new Date('2025-09-02') },\n  { id: '2', patientId: '112233445566', medicineId: '95283134', dosage: '25mg', periodicity: 'Once daily', duration: '2 weeks', startDate: new Date('2025-08-26'), endDate: new Date('2025-09-09') },\n  { id: '3', patientId: '112233445566', medicineId: '60329247', dosage: '250mg', periodicity: 'Twice daily', duration: '10 days', startDate: new Date('2025-08-26'), endDate: new Date('2025-09-05') },\n  { id: '4', patientId: '223344556677', medicineId: '09509828', dosage: '500mg', periodicity: 'Twice daily', duration: 'Ongoing', startDate: new Date('2025-08-20'), endDate: null },\n  { id: '5', patientId: '223344556677', medicineId: '31908432', dosage: '1000mg', periodicity: 'Once daily', duration: '5 days', startDate: new Date('2025-08-26'), endDate: new Date('2025-08-31') },\n  { id: '6', patientId: '223344556677', medicineId: '20944348', dosage: '10mg', periodicity: 'Once daily', duration: 'Ongoing', startDate: new Date('2025-08-20'), endDate: null }\n];\n\nconst initialLabTestTypes = [\n  { code: 'CBC-HGB', name: 'Complete Blood Count - Hemoglobin', category: 'Hematology', unit: 'g/dL', referenceRange: '12.0-16.0 g/dL', isActive: 1 },\n  { code: 'CBC-WBC', name: 'Complete Blood Count - White Blood Cells', category: 'Hematology', unit: 'cells/μL', referenceRange: '4500-11000 cells/μL', isActive: 1 },\n  { code: 'BMP-GLU', name: 'Basic Metabolic Panel - Glucose', category: 'Chemistry', unit: 'mg/dL', referenceRange: '70-100 mg/dL', isActive: 1 },\n  { code: 'BMP-CREAT', name: 'Basic Metabolic Panel - Creatinine', category: 'Chemistry', unit: 'mg/dL', referenceRange: '0.6-1.2 mg/dL', isActive: 1 },\n  { code: 'HbA1c', name: 'Hemoglobin A1C', category: 'Endocrinology', unit: '%', referenceRange: '<7.0%', isActive: 1 },\n  { code: 'LIPID-CHOL', name: 'Lipid Panel - Total Cholesterol', category: 'Chemistry', unit: 'mg/dL', referenceRange: '<200 mg/dL', isActive: 1 },\n  { code: 'LIPID-LDL', name: 'Lipid Panel - LDL Cholesterol', category: 'Chemistry', unit: 'mg/dL', referenceRange: '<100 mg/dL', isActive: 1 },\n  { code: 'LIPID-HDL', name: 'Lipid Panel - HDL Cholesterol', category: 'Chemistry', unit: 'mg/dL', referenceRange: '>40 mg/dL (M), >50 mg/dL (F)', isActive: 1 },\n  { code: 'TSH', name: 'Thyroid Stimulating Hormone', category: 'Endocrinology', unit: 'mIU/L', referenceRange: '0.4-4.0 mIU/L', isActive: 1 },\n  { code: 'PSA', name: 'Prostate Specific Antigen', category: 'Endocrinology', unit: 'ng/mL', referenceRange: '<4.0 ng/mL', isActive: 1 }\n];\n\nconst initialLabResults = [\n  // Recent labs for Olivia Chen\n  {\n    patientId: '112233445566',\n    testName: 'Complete Blood Count - Hemoglobin',\n    testCode: 'CBC-HGB',\n    value: '12.5',\n    unit: 'g/dL',\n    referenceRange: '12.0-16.0 g/dL',\n    status: 'normal',\n    takenAt: new Date('2025-08-25T08:00:00Z'),\n    resultedAt: new Date('2025-08-25T10:30:00Z'),\n    notes: 'Hemoglobin within normal limits'\n  },\n  {\n    patientId: '112233445566',\n    testName: 'Complete Blood Count - White Blood Cells',\n    testCode: 'CBC-WBC',\n    value: '7200',\n    unit: 'cells/μL',\n    referenceRange: '4500-11000 cells/μL',\n    status: 'normal',\n    takenAt: new Date('2025-08-25T08:00:00Z'),\n    resultedAt: new Date('2025-08-25T10:30:00Z'),\n    notes: null\n  },\n  {\n    patientId: '112233445566',\n    testName: 'Basic Metabolic Panel - Glucose',\n    testCode: 'BMP-GLU',\n    value: '95',\n    unit: 'mg/dL',\n    referenceRange: '70-100 mg/dL',\n    status: 'normal',\n    takenAt: new Date('2025-08-25T08:00:00Z'),\n    resultedAt: new Date('2025-08-25T09:45:00Z'),\n    notes: 'Fasting glucose normal'\n  },\n  {\n    patientId: '112233445566',\n    testName: 'Basic Metabolic Panel - Creatinine',\n    testCode: 'BMP-CREAT',\n    value: '0.9',\n    unit: 'mg/dL',\n    referenceRange: '0.6-1.2 mg/dL',\n    status: 'normal',\n    takenAt: new Date('2025-08-25T08:00:00Z'),\n    resultedAt: new Date('2025-08-25T09:45:00Z'),\n    notes: 'Kidney function normal'\n  },\n  {\n    patientId: '112233445566',\n    testName: 'Hemoglobin A1C',\n    testCode: 'HbA1c',\n    value: '5.8',\n    unit: '%',\n    referenceRange: '<7.0%',\n    status: 'normal',\n    takenAt: new Date('2025-08-20T09:00:00Z'),\n    resultedAt: new Date('2025-08-21T14:00:00Z'),\n    notes: 'Good diabetic control'\n  },\n  \n  // Recent labs for Marcus Thompson\n  {\n    patientId: '223344556677',\n    testName: 'Lipid Panel - Total Cholesterol',\n    testCode: 'LIPID-CHOL',\n    value: '220',\n    unit: 'mg/dL',\n    referenceRange: '<200 mg/dL',\n    status: 'abnormal',\n    takenAt: new Date('2025-08-24T10:30:00Z'),\n    resultedAt: new Date('2025-08-24T15:00:00Z'),\n    notes: 'Elevated cholesterol, recommend dietary changes'\n  },\n  {\n    patientId: '223344556677',\n    testName: 'Lipid Panel - LDL Cholesterol',\n    testCode: 'LIPID-LDL',\n    value: '145',\n    unit: 'mg/dL',\n    referenceRange: '<100 mg/dL',\n    status: 'abnormal',\n    takenAt: new Date('2025-08-24T10:30:00Z'),\n    resultedAt: new Date('2025-08-24T15:00:00Z'),\n    notes: 'LDL elevated'\n  },\n  {\n    patientId: '223344556677',\n    testName: 'Lipid Panel - HDL Cholesterol',\n    testCode: 'LIPID-HDL',\n    value: '38',\n    unit: 'mg/dL',\n    referenceRange: '>40 mg/dL (M), >50 mg/dL (F)',\n    status: 'abnormal',\n    takenAt: new Date('2025-08-24T10:30:00Z'),\n    resultedAt: new Date('2025-08-24T15:00:00Z'),\n    notes: 'HDL low, consider exercise'\n  },\n  {\n    patientId: '223344556677',\n    testName: 'Thyroid Stimulating Hormone',\n    testCode: 'TSH',\n    value: '2.1',\n    unit: 'mIU/L',\n    referenceRange: '0.4-4.0 mIU/L',\n    status: 'normal',\n    takenAt: new Date('2025-08-24T10:30:00Z'),\n    resultedAt: new Date('2025-08-24T16:30:00Z'),\n    notes: 'Thyroid function normal'\n  },\n  {\n    patientId: '223344556677',\n    testName: 'Prostate Specific Antigen',\n    testCode: 'PSA',\n    value: '1.8',\n    unit: 'ng/mL',\n    referenceRange: '<4.0 ng/mL',\n    status: 'normal',\n    takenAt: new Date('2025-08-22T08:00:00Z'),\n    resultedAt: new Date('2025-08-22T14:00:00Z'),\n    notes: 'Annual screening - normal'\n  }\n];\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"🌱 Seeding database...\");\n    \n    // Check if database is already seeded by looking for existing patients\n    const existingPatients = await db.select().from(patients).limit(1);\n    if (existingPatients.length > 0) {\n      console.log(\"Database already seeded, skipping...\");\n      return;\n    }\n    \n    // Insert patients\n    for (const patient of initialPatients) {\n      await db.insert(patients).values(patient).onConflictDoNothing();\n    }\n    \n    // Insert medicines\n    for (const medicine of initialMedicines) {\n      await db.insert(medicines).values(medicine).onConflictDoNothing();\n    }\n    \n    // Insert prescriptions\n    for (const prescription of initialPrescriptions) {\n      await db.insert(prescriptions).values(prescription).onConflictDoNothing();\n    }\n    \n    // Insert lab test types\n    for (const labTestType of initialLabTestTypes) {\n      await db.insert(labTestTypes).values(labTestType).onConflictDoNothing();\n    }\n    \n    // Insert lab results\n    for (const labResult of initialLabResults) {\n      await db.insert(labResults).values(labResult).onConflictDoNothing();\n    }\n    \n    console.log(\"✅ Database seeded successfully!\");\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n  }\n}","size_bytes":10291},"client/src/components/lab-results.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { type Patient, type LabResult } from \"@shared/schema\";\n\ninterface LabResultsProps {\n  patient: Patient;\n}\n\nexport function LabResults({ patient }: LabResultsProps) {\n  const [viewMode, setViewMode] = useState<'cards' | 'table'>('table');\n  const { data: labResults = [], isLoading } = useQuery<LabResult[]>({\n    queryKey: ['/api/patients', patient.id, 'lab-results'],\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'critical':\n        return 'text-red-600 bg-red-50 border-red-200';\n      case 'high':\n        return 'text-orange-600 bg-orange-50 border-orange-200';\n      case 'low':\n        return 'text-yellow-600 bg-yellow-50 border-yellow-200';\n      default:\n        return 'text-green-600 bg-green-50 border-green-200';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'critical':\n        return 'fas fa-exclamation-triangle';\n      case 'high':\n        return 'fas fa-arrow-up';\n      case 'low':\n        return 'fas fa-arrow-down';\n      default:\n        return 'fas fa-check-circle';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n        <div className=\"flex items-center space-x-2 mb-4\">\n          <i className=\"fas fa-spinner fa-spin text-medical-primary\"></i>\n          <span className=\"text-medical-text-primary\">Loading lab results...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-medical-text-primary\">\n          <i className=\"fas fa-vial text-medical-primary mr-2\"></i>Laboratory Results\n        </h3>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"text-sm text-medical-text-muted\">\n            {labResults.length} result{labResults.length !== 1 ? 's' : ''}\n          </div>\n          <div className=\"flex bg-gray-100 rounded-lg p-1\">\n            <button\n              onClick={() => setViewMode('cards')}\n              className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\n                viewMode === 'cards' \n                  ? 'bg-white text-medical-primary shadow-sm' \n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n              data-testid=\"button-cards-view\"\n            >\n              <i className=\"fas fa-th-large mr-1\"></i>Cards\n            </button>\n            <button\n              onClick={() => setViewMode('table')}\n              className={`px-3 py-1 text-sm font-medium rounded-md transition-colors ${\n                viewMode === 'table' \n                  ? 'bg-white text-medical-primary shadow-sm' \n                  : 'text-gray-600 hover:text-gray-900'\n              }`}\n              data-testid=\"button-table-view\"\n            >\n              <i className=\"fas fa-table mr-1\"></i>Table\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {labResults.length === 0 ? (\n        <div className=\"text-center py-12 text-medical-text-muted\">\n          <i className=\"fas fa-vial text-6xl mb-4 opacity-20\"></i>\n          <p className=\"text-lg font-medium mb-2\">No Lab Results</p>\n          <p className=\"text-sm\">No laboratory test results available for this patient.</p>\n        </div>\n      ) : viewMode === 'cards' ? (\n        <div className=\"space-y-4\">\n          {labResults\n            .sort((a, b) => {\n              const aDate = a.takenAt ? new Date(a.takenAt).getTime() : 0;\n              const bDate = b.takenAt ? new Date(b.takenAt).getTime() : 0;\n              return bDate - aDate;\n            })\n            .map((result) => (\n              <div \n                key={result.id} \n                className=\"border border-medical-border rounded-lg p-4 hover:shadow-sm transition-shadow relative\"\n                data-testid={`lab-result-${result.id}`}\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1 pr-20\">\n                    <div className=\"mb-2\">\n                      <h4 className=\"font-medium text-medical-text-primary\" data-testid={`test-name-${result.id}`}>\n                        {result.testName}\n                      </h4>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                      <div>\n                        <span className=\"font-medium text-medical-text-secondary\">Value:</span>\n                        <span className=\"ml-2 text-medical-text-primary\" data-testid={`test-value-${result.id}`}>\n                          {result.value} {result.unit}\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-medical-text-secondary\">Reference:</span>\n                        <span className=\"ml-2 text-medical-text-primary\" data-testid={`test-reference-${result.id}`}>\n                          {result.referenceRange || 'N/A'}\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"font-medium text-medical-text-secondary\">Collected:</span>\n                        <span className=\"ml-2 text-medical-text-primary\" data-testid={`test-collected-${result.id}`}>\n                          {result.takenAt \n                            ? `${new Date(result.takenAt).toLocaleDateString()} at ${new Date(result.takenAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`\n                            : 'Not specified'\n                          }\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"absolute top-3 right-3\">\n                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(result.status)}`}>\n                      <i className={`${getStatusIcon(result.status)} mr-1`}></i>\n                      {result.status.charAt(0).toUpperCase() + result.status.slice(1)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n        </div>\n      ) : (\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full border-collapse\" data-testid=\"lab-results-table\">\n            <thead>\n              <tr className=\"border-b-2 border-medical-border\">\n                <th className=\"text-left p-3 font-semibold text-medical-text-primary\">Test Name</th>\n                <th className=\"text-left p-3 font-semibold text-medical-text-primary\">Code</th>\n                <th className=\"text-left p-3 font-semibold text-medical-text-primary\">Value</th>\n                <th className=\"text-left p-3 font-semibold text-medical-text-primary\">Reference Range</th>\n                <th className=\"text-left p-3 font-semibold text-medical-text-primary\">Status</th>\n                <th className=\"text-left p-3 font-semibold text-medical-text-primary\">Collected</th>\n                <th className=\"text-left p-3 font-semibold text-medical-text-primary\">Notes</th>\n              </tr>\n            </thead>\n            <tbody>\n              {labResults\n                .sort((a, b) => {\n                  const aDate = a.takenAt ? new Date(a.takenAt).getTime() : 0;\n                  const bDate = b.takenAt ? new Date(b.takenAt).getTime() : 0;\n                  return bDate - aDate;\n                })\n                .map((result) => (\n                  <tr \n                    key={result.id} \n                    className=\"border-b border-medical-border hover:bg-slate-50 transition-colors\"\n                    data-testid={`table-row-${result.id}`}\n                  >\n                    <td className=\"p-3\">\n                      <div className=\"font-medium text-medical-text-primary\">\n                        {result.testName}\n                      </div>\n                    </td>\n                    <td className=\"p-3 text-sm text-medical-text-muted\">\n                      {result.testCode || '-'}\n                    </td>\n                    <td className=\"p-3\">\n                      <span className=\"font-medium text-medical-text-primary\">\n                        {result.value} {result.unit}\n                      </span>\n                    </td>\n                    <td className=\"p-3 text-sm text-medical-text-muted\">\n                      {result.referenceRange || 'N/A'}\n                    </td>\n                    <td className=\"p-3\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(result.status)}`}>\n                        <i className={`${getStatusIcon(result.status)} mr-1`}></i>\n                        {result.status.charAt(0).toUpperCase() + result.status.slice(1)}\n                      </span>\n                    </td>\n                    <td className=\"p-3 text-sm text-medical-text-muted\">\n                      {result.takenAt \n                        ? new Date(result.takenAt).toLocaleDateString()\n                        : 'Not specified'\n                      }\n                    </td>\n                    <td className=\"p-3 text-sm text-medical-text-muted max-w-xs\">\n                      <div className=\"truncate\" title={result.notes || ''}>\n                        {result.notes || '-'}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":9817},"client/src/components/next-dose-countdown.tsx":{"content":"import { useState, useEffect } from \"react\";\n\ninterface NextDoseCountdownProps {\n  lastAdministeredAt: string | Date;\n  periodicity: string;\n}\n\nexport function NextDoseCountdown({ lastAdministeredAt, periodicity }: NextDoseCountdownProps) {\n  const [timeLeft, setTimeLeft] = useState<string>(\"\");\n  const [isOverdue, setIsOverdue] = useState(false);\n\n  useEffect(() => {\n    const calculateNextDose = () => {\n      const lastDose = new Date(lastAdministeredAt);\n      let nextDoseTime: Date;\n\n      // Parse periodicity to determine next dose time\n      const periodicityLower = periodicity.toLowerCase();\n      \n      if (periodicityLower.includes('every')) {\n        const hourMatch = periodicityLower.match(/every\\s+(\\d+)\\s+hours?/);\n        if (hourMatch) {\n          const hours = parseInt(hourMatch[1]);\n          nextDoseTime = new Date(lastDose.getTime() + hours * 60 * 60 * 1000);\n        } else {\n          // Default to 6 hours if we can't parse\n          nextDoseTime = new Date(lastDose.getTime() + 6 * 60 * 60 * 1000);\n        }\n      } else if (periodicityLower.includes('once daily')) {\n        nextDoseTime = new Date(lastDose.getTime() + 24 * 60 * 60 * 1000);\n      } else if (periodicityLower.includes('twice daily')) {\n        nextDoseTime = new Date(lastDose.getTime() + 12 * 60 * 60 * 1000);\n      } else if (periodicityLower.includes('three times daily')) {\n        nextDoseTime = new Date(lastDose.getTime() + 8 * 60 * 60 * 1000);\n      } else if (periodicityLower.includes('four times daily')) {\n        nextDoseTime = new Date(lastDose.getTime() + 6 * 60 * 60 * 1000);\n      } else if (periodicityLower.includes('as needed')) {\n        // For PRN medications, show \"As needed\" instead of countdown\n        setTimeLeft(\"As needed\");\n        setIsOverdue(false);\n        return;\n      } else {\n        // Default to 6 hours\n        nextDoseTime = new Date(lastDose.getTime() + 6 * 60 * 60 * 1000);\n      }\n\n      const now = new Date();\n      const timeDiff = nextDoseTime.getTime() - now.getTime();\n\n      if (timeDiff <= 0) {\n        setIsOverdue(true);\n        const overdueDiff = Math.abs(timeDiff);\n        const overdueHours = Math.floor(overdueDiff / (1000 * 60 * 60));\n        const overdueMinutes = Math.floor((overdueDiff % (1000 * 60 * 60)) / (1000 * 60));\n        \n        if (overdueHours > 0) {\n          setTimeLeft(`${overdueHours}h ${overdueMinutes}m overdue`);\n        } else {\n          setTimeLeft(`${overdueMinutes}m overdue`);\n        }\n      } else {\n        setIsOverdue(false);\n        const hours = Math.floor(timeDiff / (1000 * 60 * 60));\n        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\n        \n        if (hours > 0) {\n          setTimeLeft(`${hours}h ${minutes}m`);\n        } else {\n          setTimeLeft(`${minutes}m`);\n        }\n      }\n    };\n\n    calculateNextDose();\n    const interval = setInterval(calculateNextDose, 60000); // Update every minute\n\n    return () => clearInterval(interval);\n  }, [lastAdministeredAt, periodicity]);\n\n  if (periodicity.toLowerCase().includes('as needed')) {\n    return (\n      <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-50 text-blue-700 border border-blue-200\">\n        <i className=\"fas fa-clock mr-1\"></i>\n        As needed\n      </span>\n    );\n  }\n\n  return (\n    <span \n      className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${\n        isOverdue \n          ? 'bg-red-50 text-red-700 border-red-200' \n          : 'bg-green-50 text-green-700 border-green-200'\n      }`}\n      data-testid=\"next-dose-countdown\"\n    >\n      <i className={`fas ${isOverdue ? 'fa-exclamation-triangle' : 'fa-clock'} mr-1`}></i>\n      {isOverdue ? '' : 'Next in '}\n      {timeLeft}\n    </span>\n  );\n}","size_bytes":3794},"client/src/components/prescription-manager.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { type Patient, type Prescription, type Medicine, type Administration } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { NextDoseCountdown } from \"./next-dose-countdown\";\n\ninterface PrescriptionManagerProps {\n  patient: Patient;\n}\n\nexport function PrescriptionManager({ patient }: PrescriptionManagerProps) {\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const [selectedMedicine, setSelectedMedicine] = useState<Medicine | null>(null);\n  const [selectedPrescription, setSelectedPrescription] = useState<Prescription | null>(null);\n  const [dosage, setDosage] = useState(\"\");\n  const [periodicity, setPeriodicity] = useState(\"\");\n  const [duration, setDuration] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [pin, setPin] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const queryClient = useQueryClient();\n\n  // Get prescriptions for this patient\n  const { data: prescriptions = [] } = useQuery<Prescription[]>({\n    queryKey: ['/api/patients', patient.id, 'prescriptions'],\n  });\n\n  // Get all medicines for lookup\n  const { data: medicines = [] } = useQuery<Medicine[]>({\n    queryKey: ['/api/medicines'],\n  });\n\n  // Get administrations for countdown timers\n  const { data: administrations = [] } = useQuery<Administration[]>({\n    queryKey: ['/api/patients', patient.id, 'administrations'],\n  });\n\n  const addPrescriptionMutation = useMutation({\n    mutationFn: async ({ medicineId, dosage, periodicity, duration, startDate, endDate, pin }: { medicineId: string, dosage: string, periodicity: string, duration: string, startDate: string, endDate: string, pin: string }) => {\n      const response = await apiRequest('POST', `/api/patients/${patient.id}/prescriptions`, {\n        medicineId,\n        dosage,\n        periodicity,\n        duration,\n        startDate,\n        endDate,\n        pin\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patient.id, 'prescriptions'] });\n      setShowAddModal(false);\n      setSelectedMedicine(null);\n      setDosage(\"\");\n      setPeriodicity(\"\");\n      setDuration(\"\");\n      setStartDate(\"\");\n      setEndDate(\"\");\n      setPin(\"\");\n      setError(\"\");\n    },\n    onError: (error: any) => {\n      if (error.message.includes(\"401\")) {\n        setError(\"Invalid PIN code\");\n      } else {\n        setError(\"Failed to add prescription\");\n      }\n    },\n  });\n\n  const updatePrescriptionMutation = useMutation({\n    mutationFn: async ({ prescriptionId, dosage, periodicity, duration, startDate, endDate, pin }: { prescriptionId: string, dosage: string, periodicity: string, duration: string, startDate: string, endDate: string, pin: string }) => {\n      const response = await apiRequest('PATCH', `/api/patients/${patient.id}/prescriptions/${prescriptionId}`, {\n        dosage,\n        periodicity,\n        duration,\n        startDate,\n        endDate,\n        pin\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patient.id, 'prescriptions'] });\n      setShowEditModal(false);\n      setSelectedPrescription(null);\n      setDosage(\"\");\n      setPeriodicity(\"\");\n      setDuration(\"\");\n      setStartDate(\"\");\n      setEndDate(\"\");\n      setPin(\"\");\n      setError(\"\");\n    },\n    onError: (error: any) => {\n      if (error.message.includes(\"401\")) {\n        setError(\"Invalid PIN code\");\n      } else {\n        setError(\"Failed to update prescription\");\n      }\n    },\n  });\n\n  const removePrescriptionMutation = useMutation({\n    mutationFn: async ({ prescriptionId, pin }: { prescriptionId: string, pin: string }) => {\n      const response = await apiRequest('DELETE', `/api/patients/${patient.id}/prescriptions/${prescriptionId}`, {\n        pin\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients', patient.id, 'prescriptions'] });\n      setShowEditModal(false);\n      setSelectedPrescription(null);\n      setDosage(\"\");\n      setPeriodicity(\"\");\n      setDuration(\"\");\n      setStartDate(\"\");\n      setEndDate(\"\");\n      setPin(\"\");\n      setError(\"\");\n    },\n    onError: (error: any) => {\n      if (error.message.includes(\"401\")) {\n        setError(\"Invalid PIN code\");\n      } else {\n        setError(\"Failed to remove prescription\");\n      }\n    },\n  });\n\n  const handleAddPrescription = () => {\n    if (!selectedMedicine || !dosage || !periodicity || !duration || !pin) {\n      setError(\"Please fill in all fields\");\n      return;\n    }\n    addPrescriptionMutation.mutate({ medicineId: selectedMedicine.id, dosage, periodicity, duration, startDate, endDate, pin });\n  };\n\n  const handleUpdatePrescription = () => {\n    if (!selectedPrescription || !dosage || !periodicity || !duration || !pin) {\n      setError(\"Please fill in all fields\");\n      return;\n    }\n    updatePrescriptionMutation.mutate({ prescriptionId: selectedPrescription.id, dosage, periodicity, duration, startDate, endDate, pin });\n  };\n\n  const handleRemovePrescription = () => {\n    if (!selectedPrescription || !pin) {\n      setError(\"Please enter PIN\");\n      return;\n    }\n    removePrescriptionMutation.mutate({ prescriptionId: selectedPrescription.id, pin });\n  };\n\n  // Function to calculate end date based on start date and duration\n  const calculateEndDate = (startDateStr: string, durationStr: string): string => {\n    if (!startDateStr || !durationStr || durationStr === \"As needed\" || durationStr === \"Ongoing\") {\n      return \"\";\n    }\n\n    const startDate = new Date(startDateStr);\n    let endDate = new Date(startDate);\n\n    // Parse duration and add to start date\n    const durationLower = durationStr.toLowerCase();\n    \n    if (durationLower.includes(\"day\")) {\n      const days = parseInt(durationLower.match(/\\d+/)?.[0] || \"0\");\n      endDate.setDate(startDate.getDate() + days - 1); // -1 because we include the start day\n    } else if (durationLower.includes(\"week\")) {\n      const weeks = parseInt(durationLower.match(/\\d+/)?.[0] || \"0\");\n      endDate.setDate(startDate.getDate() + (weeks * 7) - 1);\n    } else if (durationLower.includes(\"month\")) {\n      const months = parseInt(durationLower.match(/\\d+/)?.[0] || \"0\");\n      endDate.setMonth(startDate.getMonth() + months);\n      endDate.setDate(startDate.getDate() - 1);\n    }\n\n    return endDate.toISOString().split('T')[0];\n  };\n\n  // Handle start date change and auto-calculate end date\n  const handleStartDateChange = (newStartDate: string) => {\n    setStartDate(newStartDate);\n    if (newStartDate && duration) {\n      const calculatedEndDate = calculateEndDate(newStartDate, duration);\n      setEndDate(calculatedEndDate);\n    }\n  };\n\n  // Handle duration change and auto-calculate end date\n  const handleDurationChange = (newDuration: string) => {\n    setDuration(newDuration);\n    if (startDate && newDuration) {\n      const calculatedEndDate = calculateEndDate(startDate, newDuration);\n      setEndDate(calculatedEndDate);\n    }\n  };\n\n  const handleEditClick = (prescription: any) => {\n    setSelectedPrescription(prescription);\n    setDosage(prescription.dosage || \"\");\n    setPeriodicity(prescription.periodicity || \"\");\n    setDuration(prescription.duration || \"\");\n    setStartDate(prescription.startDate ? new Date(prescription.startDate).toISOString().split('T')[0] : \"\");\n    setEndDate(prescription.endDate ? new Date(prescription.endDate).toISOString().split('T')[0] : \"\");\n    setShowEditModal(true);\n  };\n\n  const prescribedMedicines = prescriptions.map(p => {\n    const medicine = medicines.find(m => m.id === p.medicineId);\n    return { ...p, medicine };\n  }).filter(p => p.medicine);\n\n  const unprescribedMedicines = medicines.filter(m => \n    !prescriptions.some(p => p.medicineId === m.id)\n  );\n\n  return (\n    <div className=\"bg-white rounded-xl shadow-medical border border-medical-border p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-medical-text-primary\">\n          <i className=\"fas fa-prescription-bottle text-medical-primary mr-2\"></i>Prescription Management\n        </h3>\n        <button\n          onClick={() => setShowAddModal(true)}\n          className=\"px-4 py-2 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 transition-colors font-medium\"\n          data-testid=\"button-add-prescription\"\n        >\n          <i className=\"fas fa-plus mr-2\"></i>Add Medicine\n        </button>\n      </div>\n\n      {/* Current Prescriptions */}\n      <div className=\"space-y-3\">\n        {prescribedMedicines.length === 0 ? (\n          <div className=\"text-center py-8 text-medical-text-muted\">\n            <i className=\"fas fa-prescription-bottle text-4xl mb-4 opacity-30\"></i>\n            <p className=\"text-lg font-medium mb-2\">No Prescriptions</p>\n            <p className=\"text-sm\">Add medicines to this patient's prescription list.</p>\n          </div>\n        ) : (\n          prescribedMedicines.map((prescription) => (\n            <div \n              key={prescription.id} \n              className=\"flex items-center justify-between p-4 bg-slate-50 rounded-lg border\"\n              data-testid={`prescription-${prescription.id}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-medical-primary/10 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-pills text-medical-primary\"></i>\n                </div>\n                <div>\n                  <h4 className=\"font-medium text-medical-text-primary\">\n                    {prescription.medicine?.name}\n                  </h4>\n                  <p className=\"text-sm text-medical-text-secondary\">\n                    <strong>Dosage:</strong> {prescription.dosage}\n                  </p>\n                  <p className=\"text-sm text-medical-text-secondary\">\n                    <strong>Frequency:</strong> {prescription.periodicity}\n                  </p>\n                  {prescription.duration && (\n                    <p className=\"text-sm text-medical-text-secondary\">\n                      <strong>Duration:</strong> {prescription.duration}\n                    </p>\n                  )}\n                  {prescription.startDate && (\n                    <p className=\"text-sm text-medical-text-secondary\">\n                      <strong>Start:</strong> {new Date(prescription.startDate).toLocaleDateString()}\n                      {prescription.endDate && ` - End: ${new Date(prescription.endDate).toLocaleDateString()}`}\n                    </p>\n                  )}\n                  <p className=\"text-xs text-medical-text-muted font-mono\">\n                    ID: {prescription.medicineId}\n                  </p>\n                  {(() => {\n                    const successfulAdmin = administrations.find(\n                      adm => adm.medicineId === prescription.medicineId && adm.status === 'success'\n                    );\n                    return successfulAdmin && successfulAdmin.administeredAt && (\n                      <div className=\"mt-2\">\n                        <NextDoseCountdown \n                          lastAdministeredAt={successfulAdmin.administeredAt}\n                          periodicity={prescription.periodicity}\n                        />\n                      </div>\n                    );\n                  })()}\n                </div>\n              </div>\n              <button\n                onClick={() => handleEditClick(prescription)}\n                className=\"px-3 py-1 text-blue-600 hover:bg-blue-50 rounded-lg transition-colors\"\n                data-testid={`button-edit-${prescription.id}`}\n              >\n                <i className=\"fas fa-edit mr-1\"></i>Edit\n              </button>\n            </div>\n          ))\n        )}\n      </div>\n\n      {/* Add Prescription Modal */}\n      {showAddModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border p-6 max-w-md mx-4 w-full\">\n            <div className=\"text-center mb-4\">\n              <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-plus text-green-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-medical-text-primary\">Add Prescription</h3>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                  Select Medicine\n                </label>\n                <select\n                  value={selectedMedicine?.id || ''}\n                  onChange={(e) => {\n                    const medicine = unprescribedMedicines.find(m => m.id === e.target.value);\n                    setSelectedMedicine(medicine || null);\n                  }}\n                  className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                  data-testid=\"select-add-medicine\"\n                >\n                  <option value=\"\">Choose a medicine...</option>\n                  {unprescribedMedicines.map(medicine => (\n                    <option key={medicine.id} value={medicine.id}>\n                      {medicine.name} ({medicine.id})\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                    Dosage\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={dosage}\n                    onChange={(e) => setDosage(e.target.value)}\n                    placeholder=\"e.g., 10mg, 2 tablets\"\n                    className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                    data-testid=\"input-dosage\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                    Frequency\n                  </label>\n                  <select\n                    value={periodicity}\n                    onChange={(e) => setPeriodicity(e.target.value)}\n                    className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                    data-testid=\"select-periodicity\"\n                  >\n                    <option value=\"\">Select frequency...</option>\n                    <option value=\"Once daily\">Once daily</option>\n                    <option value=\"Twice daily\">Twice daily</option>\n                    <option value=\"Three times daily\">Three times daily</option>\n                    <option value=\"Four times daily\">Four times daily</option>\n                    <option value=\"Every 2 hours\">Every 2 hours</option>\n                    <option value=\"Every 4 hours\">Every 4 hours</option>\n                    <option value=\"Every 6 hours\">Every 6 hours</option>\n                    <option value=\"Every 8 hours\">Every 8 hours</option>\n                    <option value=\"Every 12 hours\">Every 12 hours</option>\n                    <option value=\"As needed\">As needed</option>\n                    <option value=\"Every 4 hours as needed\">Every 4 hours as needed</option>\n                    <option value=\"Every 6 hours as needed\">Every 6 hours as needed</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                  Duration\n                </label>\n                <select\n                  value={duration}\n                  onChange={(e) => handleDurationChange(e.target.value)}\n                  className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                  data-testid=\"select-duration\"\n                >\n                  <option value=\"\">Select duration...</option>\n                  <option value=\"1 day\">1 day</option>\n                  <option value=\"3 days\">3 days</option>\n                  <option value=\"5 days\">5 days</option>\n                  <option value=\"7 days\">7 days</option>\n                  <option value=\"10 days\">10 days</option>\n                  <option value=\"14 days\">14 days</option>\n                  <option value=\"2 weeks\">2 weeks</option>\n                  <option value=\"3 weeks\">3 weeks</option>\n                  <option value=\"1 month\">1 month</option>\n                  <option value=\"2 months\">2 months</option>\n                  <option value=\"3 months\">3 months</option>\n                  <option value=\"6 months\">6 months</option>\n                  <option value=\"As needed\">As needed</option>\n                  <option value=\"Ongoing\">Ongoing</option>\n                </select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                    Start Date\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => handleStartDateChange(e.target.value)}\n                    className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                    End Date\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => setEndDate(e.target.value)}\n                    className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                    data-testid=\"input-end-date\"\n                    placeholder=\"Auto-calculated from duration\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                  PIN Code\n                </label>\n                <input\n                  type=\"password\"\n                  value={pin}\n                  onChange={(e) => setPin(e.target.value)}\n                  placeholder=\"Enter 4-digit PIN\"\n                  className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary text-center tracking-widest\"\n                  maxLength={4}\n                  data-testid=\"input-add-pin\"\n                />\n              </div>\n\n              {error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                  <p className=\"text-red-600 text-sm font-medium\">{error}</p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex space-x-3 mt-6\">\n              <button\n                onClick={() => {\n                  setShowAddModal(false);\n                  setSelectedMedicine(null);\n                  setDosage(\"\");\n                  setPeriodicity(\"\");\n                  setDuration(\"\");\n                  setStartDate(\"\");\n                  setEndDate(\"\");\n                  setPin(\"\");\n                  setError(\"\");\n                }}\n                className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg font-medium transition-colors\"\n                data-testid=\"button-cancel-add\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleAddPrescription}\n                disabled={addPrescriptionMutation.isPending}\n                className=\"flex-1 px-4 py-2 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 disabled:opacity-50 disabled:cursor-not-allowed font-medium transition-colors\"\n                data-testid=\"button-confirm-add\"\n              >\n                {addPrescriptionMutation.isPending ? (\n                  <><i className=\"fas fa-spinner fa-spin mr-2\"></i>Adding...</>\n                ) : (\n                  <><i className=\"fas fa-plus mr-2\"></i>Add Prescription</>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Edit Prescription Modal */}\n      {showEditModal && selectedPrescription && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border p-6 max-w-md mx-4 w-full\">\n            <div className=\"text-center mb-4\">\n              <div className=\"w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-edit text-blue-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-medical-text-primary\">Edit Prescription</h3>\n              <p className=\"text-sm text-medical-text-secondary mt-1\">\n                {selectedPrescription.medicine?.name}\n              </p>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                    Dosage\n                  </label>\n                  <input\n                    type=\"text\"\n                    value={dosage}\n                    onChange={(e) => setDosage(e.target.value)}\n                    placeholder=\"e.g., 10mg, 2 tablets\"\n                    className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                    data-testid=\"input-edit-dosage\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                    Frequency\n                  </label>\n                  <select\n                    value={periodicity}\n                    onChange={(e) => setPeriodicity(e.target.value)}\n                    className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                    data-testid=\"select-edit-periodicity\"\n                  >\n                    <option value=\"\">Select frequency...</option>\n                    <option value=\"Once daily\">Once daily</option>\n                    <option value=\"Twice daily\">Twice daily</option>\n                    <option value=\"Three times daily\">Three times daily</option>\n                    <option value=\"Four times daily\">Four times daily</option>\n                    <option value=\"Every 2 hours\">Every 2 hours</option>\n                    <option value=\"Every 4 hours\">Every 4 hours</option>\n                    <option value=\"Every 6 hours\">Every 6 hours</option>\n                    <option value=\"Every 8 hours\">Every 8 hours</option>\n                    <option value=\"Every 12 hours\">Every 12 hours</option>\n                    <option value=\"As needed\">As needed</option>\n                    <option value=\"Every 4 hours as needed\">Every 4 hours as needed</option>\n                    <option value=\"Every 6 hours as needed\">Every 6 hours as needed</option>\n                  </select>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                  Duration\n                </label>\n                <select\n                  value={duration}\n                  onChange={(e) => handleDurationChange(e.target.value)}\n                  className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                  data-testid=\"select-edit-duration\"\n                >\n                  <option value=\"\">Select duration...</option>\n                  <option value=\"1 day\">1 day</option>\n                  <option value=\"3 days\">3 days</option>\n                  <option value=\"5 days\">5 days</option>\n                  <option value=\"7 days\">7 days</option>\n                  <option value=\"10 days\">10 days</option>\n                  <option value=\"14 days\">14 days</option>\n                  <option value=\"2 weeks\">2 weeks</option>\n                  <option value=\"3 weeks\">3 weeks</option>\n                  <option value=\"1 month\">1 month</option>\n                  <option value=\"2 months\">2 months</option>\n                  <option value=\"3 months\">3 months</option>\n                  <option value=\"6 months\">6 months</option>\n                  <option value=\"As needed\">As needed</option>\n                  <option value=\"Ongoing\">Ongoing</option>\n                </select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                    Start Date\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => handleStartDateChange(e.target.value)}\n                    className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                    data-testid=\"input-edit-start-date\"\n                  />\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                    End Date\n                  </label>\n                  <input\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => setEndDate(e.target.value)}\n                    className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                    data-testid=\"input-edit-end-date\"\n                    placeholder=\"Auto-calculated from duration\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                  PIN Code\n                </label>\n                <input\n                  type=\"password\"\n                  value={pin}\n                  onChange={(e) => setPin(e.target.value)}\n                  placeholder=\"Enter 4-digit PIN\"\n                  className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary text-center tracking-widest\"\n                  maxLength={4}\n                  data-testid=\"input-edit-pin\"\n                />\n              </div>\n\n              {error && (\n                <div className=\"bg-red-50 border border-red-200 rounded-lg p-3\">\n                  <p className=\"text-red-600 text-sm font-medium\">{error}</p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex space-x-3 mt-6\">\n              <button\n                onClick={() => {\n                  setShowEditModal(false);\n                  setSelectedPrescription(null);\n                  setDosage(\"\");\n                  setPeriodicity(\"\");\n                  setDuration(\"\");\n                  setStartDate(\"\");\n                  setEndDate(\"\");\n                  setPin(\"\");\n                  setError(\"\");\n                }}\n                className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg font-medium transition-colors\"\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleRemovePrescription}\n                disabled={removePrescriptionMutation.isPending}\n                className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium transition-colors\"\n                data-testid=\"button-remove-from-edit\"\n              >\n                {removePrescriptionMutation.isPending ? (\n                  <><i className=\"fas fa-spinner fa-spin mr-1\"></i>Remove</>\n                ) : (\n                  <><i className=\"fas fa-trash mr-1\"></i>Remove</>\n                )}\n              </button>\n              <button\n                onClick={handleUpdatePrescription}\n                disabled={updatePrescriptionMutation.isPending}\n                className=\"flex-1 px-4 py-2 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 disabled:opacity-50 disabled:cursor-not-allowed font-medium transition-colors\"\n                data-testid=\"button-confirm-edit\"\n              >\n                {updatePrescriptionMutation.isPending ? (\n                  <><i className=\"fas fa-spinner fa-spin mr-2\"></i>Updating...</>\n                ) : (\n                  <><i className=\"fas fa-save mr-2\"></i>Update Prescription</>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Remove Prescription Modal - This is now only called from Edit modal */}\n      {false && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border p-6 max-w-md mx-4 w-full\">\n            <div className=\"text-center mb-4\">\n              <div className=\"w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <i className=\"fas fa-trash text-red-600 text-xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-medical-text-primary\">Remove Prescription</h3>\n            </div>\n            \n            <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-4\">\n              <p className=\"text-sm text-gray-800 mb-2\">\n                Are you sure you want to remove <strong>{selectedPrescription.medicine?.name}</strong> from this patient's prescriptions?\n              </p>\n              <div className=\"text-xs text-gray-600 mb-2\">\n                <p><strong>Dosage:</strong> {selectedPrescription.dosage}</p>\n                <p><strong>Frequency:</strong> {selectedPrescription.periodicity}</p>\n              </div>\n              <p className=\"text-xs text-gray-600\">\n                This action cannot be undone.\n              </p>\n            </div>\n\n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                PIN Code Required\n              </label>\n              <input\n                type=\"password\"\n                value={pin}\n                onChange={(e) => setPin(e.target.value)}\n                placeholder=\"Enter 4-digit PIN\"\n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary text-center tracking-widest\"\n                maxLength={4}\n                data-testid=\"input-remove-pin\"\n              />\n            </div>\n\n            {error && (\n              <div className=\"bg-red-50 border border-red-200 rounded-lg p-3 mb-4\">\n                <p className=\"text-red-600 text-sm font-medium\">{error}</p>\n              </div>\n            )}\n\n            <div className=\"flex space-x-3\">\n              <button\n                onClick={() => {\n                  setShowRemoveModal(false);\n                  setSelectedPrescription(null);\n                  setPin(\"\");\n                  setError(\"\");\n                }}\n                className=\"flex-1 px-4 py-2 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-lg font-medium transition-colors\"\n                data-testid=\"button-cancel-remove\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={handleRemovePrescription}\n                disabled={removePrescriptionMutation.isPending}\n                className=\"flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 disabled:cursor-not-allowed font-medium transition-colors\"\n                data-testid=\"button-confirm-remove\"\n              >\n                {removePrescriptionMutation.isPending ? (\n                  <><i className=\"fas fa-spinner fa-spin mr-2\"></i>Removing...</>\n                ) : (\n                  <><i className=\"fas fa-trash mr-2\"></i>Remove Prescription</>\n                )}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":33485},"client/src/components/database-management.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { type Medicine, type Patient } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface DatabaseManagementProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function DatabaseManagement({ isOpen, onClose }: DatabaseManagementProps) {\n  // Generate random 12-digit patient ID\n  const generatePatientId = () => {\n    return Math.floor(100000000000 + Math.random() * 900000000000).toString();\n  };\n  \n  // Generate random 8-digit medicine ID\n  const generateMedicineId = () => {\n    return Math.floor(10000000 + Math.random() * 90000000).toString();\n  };\n\n  const [activeTab, setActiveTab] = useState<'medicines' | 'patients'>('medicines');\n  const [newMedicine, setNewMedicine] = useState({ id: generateMedicineId(), name: '' });\n  const [newPatient, setNewPatient] = useState({\n    id: generatePatientId(),\n    name: '',\n    dob: '',\n    age: 0,\n    sex: '',\n    bed: '',\n    department: '',\n    status: 'Stable'\n  });\n  \n  // Handle tab switching\n  const handleTabSwitch = (tab: 'medicines' | 'patients') => {\n    setActiveTab(tab);\n    if (tab === 'patients') {\n      setNewPatient(prev => ({\n        ...prev,\n        id: generatePatientId()\n      }));\n    } else if (tab === 'medicines') {\n      setNewMedicine(prev => ({\n        ...prev,\n        id: generateMedicineId()\n      }));\n    }\n  };\n  \n  const queryClient = useQueryClient();\n  \n  // Get existing medicines and patients\n  const { data: medicines = [] } = useQuery<Medicine[]>({\n    queryKey: ['/api/medicines'],\n  });\n  \n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: ['/api/patients'],\n  });\n\n  const addMedicineMutation = useMutation({\n    mutationFn: async (medicine: { id: string, name: string }) => {\n      const response = await apiRequest('POST', '/api/medicines', medicine);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/medicines'] });\n      setNewMedicine({ id: generateMedicineId(), name: '' });\n    },\n  });\n\n  const addPatientMutation = useMutation({\n    mutationFn: async (patient: any) => {\n      const response = await apiRequest('POST', '/api/patients', patient);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      setNewPatient({\n        id: generatePatientId(),\n        name: '',\n        dob: '',\n        age: 0,\n        sex: '',\n        bed: '',\n        department: '',\n        status: 'Stable'\n      });\n    },\n  });\n\n  const handleAddMedicine = () => {\n    if (!newMedicine.id || !newMedicine.name) return;\n    addMedicineMutation.mutate(newMedicine);\n  };\n\n  const handleAddPatient = () => {\n    if (!newPatient.id || !newPatient.name) return;\n    addPatientMutation.mutate({\n      ...newPatient,\n      doseWeight: '70 kg', // Default weight\n      mrn: 'Generated',\n      fin: 'Generated',\n      admitted: new Date().toISOString().split('T')[0],\n      codeStatus: 'Full Code',\n      isolation: 'None',\n      allergies: 'None',\n      provider: 'System Admin',\n      notes: 'Added via database management',\n      chartData: {\n        background: 'Patient added via admin interface',\n        summary: 'New patient entry',\n        discharge: 'TBD',\n        handoff: 'TBD'\n      }\n    });\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border max-w-4xl mx-4 w-full max-h-[90vh] overflow-hidden\">\n        {/* Header */}\n        <div className=\"bg-medical-primary text-white p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-database text-2xl\"></i>\n              <div>\n                <h2 className=\"text-xl font-semibold\">Database Management</h2>\n                <p className=\"text-medical-primary-light text-sm\">Add new medicines and patients</p>\n              </div>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"text-white hover:text-gray-200 transition-colors\"\n              data-testid=\"button-close-db-management\"\n            >\n              <i className=\"fas fa-times text-xl\"></i>\n            </button>\n          </div>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"border-b border-medical-border\">\n          <div className=\"flex\">\n            <button\n              onClick={() => handleTabSwitch('medicines')}\n              className={`flex-1 px-6 py-4 text-sm font-medium border-b-2 transition-colors ${\n                activeTab === 'medicines'\n                  ? 'border-medical-primary text-medical-primary bg-medical-primary/5'\n                  : 'border-transparent text-medical-text-muted hover:text-medical-text-primary'\n              }`}\n              data-testid=\"tab-medicines\"\n            >\n              <i className=\"fas fa-pills mr-2\"></i>Medicines ({medicines.length})\n            </button>\n            <button\n              onClick={() => handleTabSwitch('patients')}\n              className={`flex-1 px-6 py-4 text-sm font-medium border-b-2 transition-colors ${\n                activeTab === 'patients'\n                  ? 'border-medical-primary text-medical-primary bg-medical-primary/5'\n                  : 'border-transparent text-medical-text-muted hover:text-medical-text-primary'\n              }`}\n              data-testid=\"tab-patients\"\n            >\n              <i className=\"fas fa-user-plus mr-2\"></i>Patients ({patients.length})\n            </button>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 max-h-[60vh] overflow-y-auto\">\n          {activeTab === 'medicines' && (\n            <div className=\"space-y-6\">\n              {/* Add New Medicine Form */}\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n                  <i className=\"fas fa-plus text-medical-primary mr-2\"></i>Add New Medicine\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Medicine ID/Barcode\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={newMedicine.id}\n                      readOnly\n                      placeholder=\"Auto-generated ID\"\n                      className=\"w-full p-3 border border-medical-border rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed\"\n                      data-testid=\"input-medicine-id\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Medicine Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={newMedicine.name}\n                      onChange={(e) => setNewMedicine(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"e.g., Amoxicillin\"\n                      className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                      data-testid=\"input-medicine-name\"\n                    />\n                  </div>\n                  <div className=\"flex items-end\">\n                    <button\n                      onClick={handleAddMedicine}\n                      disabled={!newMedicine.id || !newMedicine.name || addMedicineMutation.isPending}\n                      className=\"w-full px-4 py-3 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 disabled:opacity-50 disabled:cursor-not-allowed font-medium transition-colors\"\n                      data-testid=\"button-add-medicine\"\n                    >\n                      {addMedicineMutation.isPending ? (\n                        <><i className=\"fas fa-spinner fa-spin mr-2\"></i>Adding...</>\n                      ) : (\n                        <><i className=\"fas fa-plus mr-2\"></i>Add Medicine</>\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Existing Medicines List */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n                  Existing Medicines\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3 max-h-64 overflow-y-auto\">\n                  {medicines.map(medicine => (\n                    <div key={medicine.id} className=\"bg-white border border-medical-border rounded-lg p-3\">\n                      <h4 className=\"font-medium text-medical-text-primary\">{medicine.name}</h4>\n                      <p className=\"text-xs text-medical-text-muted font-mono\">ID: {medicine.id}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'patients' && (\n            <div className=\"space-y-6\">\n              {/* Add New Patient Form */}\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n                  <i className=\"fas fa-plus text-medical-primary mr-2\"></i>Add New Patient\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Patient ID/MRN\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={newPatient.id}\n                      readOnly\n                      placeholder=\"Auto-generated ID\"\n                      className=\"w-full p-3 border border-medical-border rounded-lg bg-gray-50 text-gray-600 cursor-not-allowed\"\n                      data-testid=\"input-patient-id\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Full Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={newPatient.name}\n                      onChange={(e) => setNewPatient(prev => ({ ...prev, name: e.target.value }))}\n                      placeholder=\"e.g., John Smith\"\n                      className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                      data-testid=\"input-patient-name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Date of Birth\n                    </label>\n                    <input\n                      type=\"date\"\n                      value={newPatient.dob}\n                      onChange={(e) => setNewPatient(prev => ({ ...prev, dob: e.target.value }))}\n                      className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                      data-testid=\"input-patient-dob\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Age\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={newPatient.age || ''}\n                      onChange={(e) => setNewPatient(prev => ({ ...prev, age: parseInt(e.target.value) || 0 }))}\n                      placeholder=\"e.g., 45\"\n                      className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                      data-testid=\"input-patient-age\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Sex\n                    </label>\n                    <select\n                      value={newPatient.sex}\n                      onChange={(e) => setNewPatient(prev => ({ ...prev, sex: e.target.value }))}\n                      className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                      data-testid=\"select-patient-sex\"\n                    >\n                      <option value=\"\">Select sex...</option>\n                      <option value=\"Male\">Male</option>\n                      <option value=\"Female\">Female</option>\n                      <option value=\"Other\">Other</option>\n                    </select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Bed/Room\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={newPatient.bed}\n                      onChange={(e) => setNewPatient(prev => ({ ...prev, bed: e.target.value }))}\n                      placeholder=\"e.g., ICU-205\"\n                      className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                      data-testid=\"input-patient-bed\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Department\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={newPatient.department}\n                      onChange={(e) => setNewPatient(prev => ({ ...prev, department: e.target.value }))}\n                      placeholder=\"e.g., Emergency\"\n                      className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                      data-testid=\"input-patient-department\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-medical-text-primary mb-2\">\n                      Status\n                    </label>\n                    <select\n                      value={newPatient.status}\n                      onChange={(e) => setNewPatient(prev => ({ ...prev, status: e.target.value }))}\n                      className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                      data-testid=\"select-patient-status\"\n                    >\n                      <option value=\"Stable\">Stable</option>\n                      <option value=\"Critical\">Critical</option>\n                      <option value=\"Good\">Good</option>\n                      <option value=\"Improving\">Improving</option>\n                    </select>\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <button\n                    onClick={handleAddPatient}\n                    disabled={!newPatient.id || !newPatient.name || addPatientMutation.isPending}\n                    className=\"px-6 py-3 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 disabled:opacity-50 disabled:cursor-not-allowed font-medium transition-colors\"\n                    data-testid=\"button-add-patient\"\n                  >\n                    {addPatientMutation.isPending ? (\n                      <><i className=\"fas fa-spinner fa-spin mr-2\"></i>Adding Patient...</>\n                    ) : (\n                      <><i className=\"fas fa-user-plus mr-2\"></i>Add Patient</>\n                    )}\n                  </button>\n                </div>\n              </div>\n\n              {/* Existing Patients List */}\n              <div>\n                <h3 className=\"text-lg font-semibold text-medical-text-primary mb-4\">\n                  Existing Patients\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 max-h-64 overflow-y-auto\">\n                  {patients.map(patient => (\n                    <div key={patient.id} className=\"bg-white border border-medical-border rounded-lg p-3\">\n                      <h4 className=\"font-medium text-medical-text-primary\">{patient.name}</h4>\n                      <p className=\"text-sm text-medical-text-secondary\">{patient.department} - {patient.bed}</p>\n                      <p className=\"text-xs text-medical-text-muted font-mono\">ID: {patient.id}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":17324},"client/src/components/lab-order.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type Patient, type LabTestType } from \"@shared/schema\";\n\ninterface LabOrderProps {\n  onOrderComplete: () => void;\n}\n\nexport function LabOrder({ onOrderComplete }: LabOrderProps) {\n  const [selectedPatient, setSelectedPatient] = useState(\"\");\n  const [selectedTests, setSelectedTests] = useState<string[]>([]);\n  const [orderDate, setOrderDate] = useState(new Date().toISOString().split('T')[0]);\n  const [showPinModal, setShowPinModal] = useState(false);\n  const [pin, setPin] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: patients = [], isLoading: patientsLoading } = useQuery<Patient[]>({\n    queryKey: ['/api/patients'],\n  });\n\n  const { data: availableTests = [], isLoading: testsLoading } = useQuery<LabTestType[]>({\n    queryKey: ['/api/lab-test-types'],\n  });\n\n  const orderLabsMutation = useMutation({\n    mutationFn: async (orderData: { patientId: string, tests: string[], orderDate: string }) => {\n      const response = await apiRequest('POST', '/api/lab-orders', orderData);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Lab Orders Submitted Successfully\",\n        description: `${data.resultsCreated} lab results generated for patient`,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/patients'] });\n      // Reset form\n      setSelectedPatient(\"\");\n      setSelectedTests([]);\n      setOrderDate(new Date().toISOString().split('T')[0]);\n      setShowPinModal(false);\n      setPin(\"\");\n      onOrderComplete();\n    },\n    onError: () => {\n      toast({\n        title: \"Order Failed\",\n        description: \"Failed to submit lab orders. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleTestToggle = (testCode: string) => {\n    setSelectedTests(prev => \n      prev.includes(testCode) \n        ? prev.filter(code => code !== testCode)\n        : [...prev, testCode]\n    );\n  };\n\n  const handleOrderSubmit = () => {\n    setError(\"\");\n    \n    if (!selectedPatient) {\n      setError(\"Please select a patient\");\n      return;\n    }\n    \n    if (selectedTests.length === 0) {\n      setError(\"Please select at least one test\");\n      return;\n    }\n    \n    setShowPinModal(true);\n  };\n\n  const handlePinSubmit = () => {\n    if (pin === \"1234\") {\n      orderLabsMutation.mutate({\n        patientId: selectedPatient,\n        tests: selectedTests,\n        orderDate: orderDate\n      });\n    } else {\n      toast({\n        title: \"Invalid PIN\",\n        description: \"Incorrect PIN. Lab order cancelled.\",\n        variant: \"destructive\",\n      });\n      setPin(\"\");\n    }\n  };\n\n  const selectedPatientData = patients.find(p => p.id === selectedPatient);\n\n  return (\n    <>\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <i className=\"fas fa-vial text-6xl text-medical-primary mb-4\"></i>\n          <h3 className=\"text-2xl font-bold text-medical-text-primary mb-2\">Order Laboratory Tests</h3>\n          <p className=\"text-medical-text-muted\">Select patient, tests, and date to generate lab results</p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* Patient Selection */}\n          <div className=\"bg-slate-50 rounded-lg p-6\">\n            <h4 className=\"font-semibold text-medical-text-primary mb-4\">\n              <i className=\"fas fa-user-injured mr-2\"></i>Select Patient\n            </h4>\n            \n            {patientsLoading ? (\n              <div className=\"text-center py-4\">\n                <i className=\"fas fa-spinner fa-spin text-medical-primary\"></i>\n                <span className=\"ml-2\">Loading patients...</span>\n              </div>\n            ) : (\n              <select \n                value={selectedPatient}\n                onChange={(e) => setSelectedPatient(e.target.value)}\n                className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                data-testid=\"select-patient\"\n              >\n                <option value=\"\">Choose a patient...</option>\n                {patients.map(patient => (\n                  <option key={patient.id} value={patient.id}>\n                    {patient.name} (ID: {patient.id})\n                  </option>\n                ))}\n              </select>\n            )}\n            \n            {selectedPatientData && (\n              <div className=\"mt-3 p-3 bg-white rounded border border-medical-border\">\n                <p className=\"text-sm\">\n                  <strong>{selectedPatientData.name}</strong> - {selectedPatientData.age} years old, {selectedPatientData.sex} - {selectedPatientData.department}\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Order Date */}\n          <div className=\"bg-slate-50 rounded-lg p-6\">\n            <h4 className=\"font-semibold text-medical-text-primary mb-4\">\n              <i className=\"fas fa-calendar mr-2\"></i>Order Date\n            </h4>\n            <input\n              type=\"date\"\n              value={orderDate}\n              onChange={(e) => setOrderDate(e.target.value)}\n              className=\"w-full p-3 border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n              data-testid=\"input-order-date\"\n            />\n          </div>\n\n          {/* Test Selection */}\n          <div className=\"bg-slate-50 rounded-lg p-6\">\n            <h4 className=\"font-semibold text-medical-text-primary mb-4\">\n              <i className=\"fas fa-flask mr-2\"></i>Select Laboratory Tests ({selectedTests.length} selected)\n            </h4>\n            \n            {testsLoading ? (\n              <div className=\"text-center py-4\">\n                <i className=\"fas fa-spinner fa-spin text-medical-primary\"></i>\n                <span className=\"ml-2\">Loading test types...</span>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                {availableTests.map(test => (\n                <label \n                  key={test.code} \n                  className={`flex items-start p-3 border-2 rounded-lg cursor-pointer transition-all ${\n                    selectedTests.includes(test.code)\n                      ? 'border-medical-primary bg-teal-50'\n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  data-testid={`test-option-${test.code}`}\n                >\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedTests.includes(test.code)}\n                    onChange={() => handleTestToggle(test.code)}\n                    className=\"mt-1 mr-3\"\n                  />\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-medical-text-primary\">{test.name}</div>\n                    <div className=\"text-xs text-medical-text-muted mt-1\">\n                      Code: {test.code} | Reference: {test.referenceRange}\n                    </div>\n                  </div>\n                </label>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Error Display */}\n          {error && (\n            <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg text-red-700\" data-testid=\"error-message\">\n              <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n              {error}\n            </div>\n          )}\n\n          {/* Order Button */}\n          <div className=\"text-center\">\n            <button\n              onClick={handleOrderSubmit}\n              disabled={orderLabsMutation.isPending}\n              className=\"px-8 py-3 bg-medical-primary hover:bg-teal-800 text-white font-medium rounded-lg transition-colors duration-200 disabled:opacity-50\"\n              data-testid=\"button-order-labs\"\n            >\n              <i className=\"fas fa-vial mr-2\"></i>\n              {orderLabsMutation.isPending ? 'Processing Order...' : 'Order Laboratory Tests'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* PIN Confirmation Modal */}\n      {showPinModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-xl shadow-2xl border border-medical-border p-6 max-w-md mx-4 w-full\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-medical-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-lock text-white text-2xl\"></i>\n              </div>\n              <h3 className=\"text-xl font-semibold text-medical-text-primary mb-2\">Confirm Lab Order</h3>\n              <p className=\"text-medical-text-secondary mb-4\">\n                Ordering {selectedTests.length} test{selectedTests.length !== 1 ? 's' : ''} for {selectedPatientData?.name}\n              </p>\n              <p className=\"text-medical-text-muted mb-6\">Enter PIN to confirm order</p>\n              \n              <div className=\"mb-6\">\n                <input\n                  type=\"password\"\n                  value={pin}\n                  onChange={(e) => setPin(e.target.value)}\n                  placeholder=\"Enter PIN\"\n                  className=\"w-full p-4 text-center text-2xl font-mono border border-medical-border rounded-lg focus:outline-none focus:ring-2 focus:ring-medical-primary\"\n                  maxLength={4}\n                  data-testid=\"input-lab-pin\"\n                  onKeyPress={(e) => e.key === 'Enter' && handlePinSubmit()}\n                />\n              </div>\n              \n              <div className=\"flex space-x-3\">\n                <button\n                  onClick={() => {setShowPinModal(false); setPin(\"\");}}\n                  className=\"flex-1 px-4 py-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors\"\n                  data-testid=\"button-cancel-lab-pin\"\n                >\n                  Cancel\n                </button>\n                <button\n                  onClick={handlePinSubmit}\n                  disabled={!pin || orderLabsMutation.isPending}\n                  className=\"flex-1 px-4 py-3 bg-medical-primary text-white rounded-lg hover:bg-medical-primary/90 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n                  data-testid=\"button-confirm-lab-order\"\n                >\n                  {orderLabsMutation.isPending ? 'Ordering...' : 'Confirm Order'}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":10860}},"version":1}